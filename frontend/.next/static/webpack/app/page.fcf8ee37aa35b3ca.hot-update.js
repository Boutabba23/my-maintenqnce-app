"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./hooks/useAppLogic.ts":
/*!******************************!*\
  !*** ./hooks/useAppLogic.ts ***!
  \******************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   defaultCustomColors: function() { return /* binding */ defaultCustomColors; },\n/* harmony export */   useAppLogic: function() { return /* binding */ useAppLogic; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../types */ \"(app-pages-browser)/./types.ts\");\n/* harmony import */ var _utils_maintenance__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/maintenance */ \"(app-pages-browser)/./utils/maintenance.ts\");\n/* harmony import */ var _utils_supabase__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/supabase */ \"(app-pages-browser)/./utils/supabase.ts\");\n/* __next_internal_client_entry_do_not_use__ defaultCustomColors,useAppLogic auto */ \n\n\n\nconst loadFromStorage = (key, defaultValue)=>{\n    try {\n        // Check if we're in a browser environment\n        if ( false || typeof localStorage === \"undefined\") {\n            return defaultValue;\n        }\n        const storedValue = localStorage.getItem(key);\n        if (storedValue) {\n            try {\n                return JSON.parse(storedValue);\n            } catch (e) {\n                if (key === \"gestifiltres-theme\" && !storedValue.startsWith('\"')) {\n                    console.warn(\"Old theme format detected, migrating.\");\n                    return storedValue;\n                }\n                throw e;\n            }\n        }\n    } catch (error) {\n        console.error('Error processing localStorage key \"'.concat(key, '\":'), error);\n    }\n    return defaultValue;\n};\nconst defaultCustomColors = {\n    background: \"#f8fafc\",\n    foreground: \"#0f172a\",\n    foregroundSecondary: \"#64748b\",\n    card: \"#ffffff\",\n    cardForeground: \"#0f172a\",\n    primary: \"#f97316\",\n    primaryForeground: \"#f8fafc\",\n    accent: \"#f1f5f9\",\n    destructive: \"#ef4444\",\n    destructiveForeground: \"#f8fafc\",\n    border: \"#e2e8f0\",\n    input: \"#f1f5f9\",\n    ring: \"#f97316\",\n    cardBorders: [\n        \"#3b82f6\",\n        \"#10b981\",\n        \"#f59e0b\",\n        \"#ef4444\",\n        \"#8b5cf6\",\n        \"#0ea5e9\"\n    ]\n};\nconst useAppLogic = ()=>{\n    const [isLoading, setIsLoading] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(true);\n    const [currentView, setCurrentView] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(_types__WEBPACK_IMPORTED_MODULE_1__.View.DASHBOARD);\n    const [machines, setMachines] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);\n    const [filterGroups, setFilterGroups] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);\n    const [filterTypes, setFilterTypes] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);\n    const [selectedMachine, setSelectedMachine] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [maintenanceRecords, setMaintenanceRecords] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);\n    const [theme, _setTheme] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(()=>loadFromStorage(\"gestifiltres-theme\", \"default-light\"));\n    const [savedThemes, setSavedThemes] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(()=>loadFromStorage(\"gestifiltres-savedThemes\", []));\n    const [customColors, setCustomColors] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(()=>{\n        const saved = loadFromStorage(\"gestifiltres-customColors\", defaultCustomColors);\n        return {\n            ...defaultCustomColors,\n            ...saved\n        };\n    });\n    const [highlightedFilterGroupId, setHighlightedFilterGroupId] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [isSidebarOpen, setIsSidebarOpen] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [notifications, setNotifications] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);\n    const [toasts, setToasts] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);\n    const [isScannerOpen, setIsScannerOpen] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [isAIAssistantOpen, setIsAIAssistantOpen] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [isMachineModalOpen, setIsMachineModalOpen] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [editingMachine, setEditingMachine] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [isFilterGroupModalOpen, setIsFilterGroupModalOpen] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [editingFilterGroup, setEditingFilterGroup] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [isMaintenanceModalOpen, setIsMaintenanceModalOpen] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [editingMaintenanceRecord, setEditingMaintenanceRecord] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [isMaintenanceViewOnly, setIsMaintenanceViewOnly] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [isAddStockModalOpen, setIsAddStockModalOpen] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [stockUpdateInfo, setStockUpdateInfo] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [isThemeCustomizerOpen, setIsThemeCustomizerOpen] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [editingCustomTheme, setEditingCustomTheme] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [isImportModalOpen, setIsImportModalOpen] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [confirmationDialogConfig, setConfirmationDialogConfig] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)({\n        isOpen: false,\n        title: \"\",\n        description: \"\",\n        onConfirm: ()=>{}\n    });\n    const addToast = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((toast)=>{\n        const id = \"toast-\".concat(Date.now());\n        setToasts((prev)=>[\n                ...prev,\n                {\n                    id,\n                    ...toast\n                }\n            ]);\n    }, []);\n    const fetchData = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async ()=>{\n        try {\n            const [machinesRes, filterGroupsRes, filterTypesRes, maintenanceRecordsRes] = await Promise.all([\n                _utils_supabase__WEBPACK_IMPORTED_MODULE_3__.supabase.from(\"machines\").select(\"*\"),\n                _utils_supabase__WEBPACK_IMPORTED_MODULE_3__.supabase.from(\"filter_groups\").select(\"*\"),\n                _utils_supabase__WEBPACK_IMPORTED_MODULE_3__.supabase.from(\"filter_types\").select(\"*\"),\n                _utils_supabase__WEBPACK_IMPORTED_MODULE_3__.supabase.from(\"maintenance_records\").select(\"*\")\n            ]);\n            if (machinesRes.error) throw machinesRes.error;\n            if (filterGroupsRes.error) throw filterGroupsRes.error;\n            if (filterTypesRes.error) throw filterTypesRes.error;\n            if (maintenanceRecordsRes.error) throw maintenanceRecordsRes.error;\n            // Transform database results to match application types\n            const transformedMachines = (machinesRes.data || []).map((machine)=>({\n                    id: machine.id,\n                    code: machine.code,\n                    designation: machine.designation,\n                    marque: machine.marque,\n                    type: machine.type,\n                    serialNumber: machine.serial_number || \"\",\n                    registrationNumber: machine.registration_number || \"\",\n                    serviceHours: machine.service_hours,\n                    assignedFilters: machine.assigned_filters || []\n                }));\n            const transformedFilterGroups = (filterGroupsRes.data || []).map((group)=>({\n                    id: group.id,\n                    name: group.name,\n                    filterType: group.filter_type || \"\",\n                    originalReferenceId: group.original_reference_id,\n                    references: group[\"references\"] || []\n                }));\n            const transformedMaintenanceRecords = (maintenanceRecordsRes.data || []).map((record)=>({\n                    id: record.id,\n                    machineId: record.machine_id,\n                    maintenanceRange: record.maintenance_range,\n                    serviceHours: record.service_hours,\n                    date: record.date,\n                    filtersUsed: record.filters_used || []\n                }));\n            setMachines(transformedMachines);\n            setFilterGroups(transformedFilterGroups);\n            setFilterTypes(filterTypesRes.data || []);\n            setMaintenanceRecords(transformedMaintenanceRecords);\n        } catch (error) {\n            console.error(\"Failed to fetch data from Supabase:\", error);\n            addToast({\n                type: \"error\",\n                title: \"Erreur de chargement\",\n                description: error.message\n            });\n        } finally{\n            setIsLoading(false);\n        }\n    }, [\n        addToast\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        fetchData();\n    }, [\n        fetchData\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if ( true && typeof localStorage !== \"undefined\") {\n            localStorage.setItem(\"gestifiltres-theme\", JSON.stringify(theme));\n        }\n    }, [\n        theme\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if ( true && typeof localStorage !== \"undefined\") {\n            localStorage.setItem(\"gestifiltres-customColors\", JSON.stringify(customColors));\n        }\n    }, [\n        customColors\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if ( true && typeof localStorage !== \"undefined\") {\n            localStorage.setItem(\"gestifiltres-savedThemes\", JSON.stringify(savedThemes));\n        }\n    }, [\n        savedThemes\n    ]);\n    const removeToast = (id)=>{\n        setToasts((prev)=>prev.filter((t)=>t.id !== id));\n    };\n    const navigateToFilterGroup = (groupId)=>{\n        setIsAIAssistantOpen(false);\n        setCurrentView(_types__WEBPACK_IMPORTED_MODULE_1__.View.FILTER_MANAGEMENT);\n        setHighlightedFilterGroupId(groupId);\n    };\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        const now = new Date().toISOString();\n        const currentValidAlerts = [];\n        const historyByMachine = new Map();\n        maintenanceRecords.forEach((rec)=>{\n            if (!historyByMachine.has(rec.machineId)) historyByMachine.set(rec.machineId, []);\n            historyByMachine.get(rec.machineId).push(rec);\n        });\n        machines.forEach((machine)=>{\n            const history = historyByMachine.get(machine.id) || [];\n            const nextMaint = (0,_utils_maintenance__WEBPACK_IMPORTED_MODULE_2__.calculateNextMaintenance)(machine, history);\n            if (nextMaint && nextMaint.dueIn <= 50) {\n                currentValidAlerts.push({\n                    id: \"maint-alert-\".concat(machine.id, \"-\").concat(nextMaint.hours),\n                    type: \"maintenance\",\n                    message: \"L'engin \".concat(machine.designation, \" (\").concat(machine.code, \") n\\xe9cessite une maintenance (Gamme \").concat(nextMaint.gamme, \") dans \").concat(nextMaint.dueIn, \"h.\"),\n                    entityId: machine.id\n                });\n            }\n        });\n        filterGroups.forEach((group)=>{\n            group.references.forEach((ref)=>{\n                if (ref.stock > 0 && ref.stock <= 5) {\n                    currentValidAlerts.push({\n                        id: \"stock-alert-\".concat(ref.id),\n                        type: \"stock\",\n                        message: \"Le stock pour le filtre \".concat(ref.reference, \" (\").concat(ref.manufacturer, \") est faible (\").concat(ref.stock, \" unit\\xe9s).\"),\n                        entityId: group.id\n                    });\n                }\n            });\n        });\n        setNotifications((prevNotifications)=>{\n            const prevMap = new Map(prevNotifications.map((n)=>[\n                    n.id,\n                    n\n                ]));\n            const nextNotifications = currentValidAlerts.map((alert)=>{\n                const prev = prevMap.get(alert.id);\n                if (prev) {\n                    return {\n                        ...prev,\n                        message: alert.message\n                    };\n                }\n                return {\n                    ...alert,\n                    read: false,\n                    createdAt: now\n                };\n            });\n            return nextNotifications;\n        });\n    }, [\n        machines,\n        filterGroups,\n        maintenanceRecords\n    ]);\n    const toggleSidebar = ()=>setIsSidebarOpen((prev)=>!prev);\n    const closeSidebar = ()=>setIsSidebarOpen(false);\n    const selectMachine = (machineId)=>{\n        const machine = machines.find((m)=>m.id === machineId);\n        if (machine) {\n            setSelectedMachine(machine);\n            setCurrentView(_types__WEBPACK_IMPORTED_MODULE_1__.View.MACHINE_DETAIL);\n        }\n    };\n    const assignFilterToMachine = async (machineId, filterTypeId, filterGroupId)=>{\n        const machineToUpdate = machines.find((m)=>m.id === machineId);\n        if (!machineToUpdate) return;\n        const newAssignedFilters = [\n            ...machineToUpdate.assignedFilters\n        ];\n        const existingIndex = newAssignedFilters.findIndex((af)=>af.filterTypeId === filterTypeId);\n        if (existingIndex > -1) {\n            newAssignedFilters[existingIndex] = {\n                ...newAssignedFilters[existingIndex],\n                filterGroupId\n            };\n        } else {\n            newAssignedFilters.push({\n                filterTypeId,\n                filterGroupId\n            });\n        }\n        const { error } = await _utils_supabase__WEBPACK_IMPORTED_MODULE_3__.supabase.from(\"machines\").update({\n            assigned_filters: newAssignedFilters\n        }).eq(\"id\", machineId);\n        if (error) {\n            addToast({\n                type: \"error\",\n                title: \"Erreur\",\n                description: error.message\n            });\n        } else {\n            fetchData();\n            if ((selectedMachine === null || selectedMachine === void 0 ? void 0 : selectedMachine.id) === machineId) {\n                const updatedMachine = {\n                    ...machineToUpdate,\n                    assignedFilters: newAssignedFilters\n                };\n                setSelectedMachine(updatedMachine);\n            }\n        }\n    };\n    const addFilterTypeToMachine = async (machineId, filterTypeId)=>{\n        const machineToUpdate = machines.find((m)=>m.id === machineId);\n        if (!machineToUpdate || machineToUpdate.assignedFilters.some((af)=>af.filterTypeId === filterTypeId)) return;\n        const newAssignedFilters = [\n            ...machineToUpdate.assignedFilters,\n            {\n                filterTypeId,\n                filterGroupId: null\n            }\n        ];\n        const { error } = await _utils_supabase__WEBPACK_IMPORTED_MODULE_3__.supabase.from(\"machines\").update({\n            assigned_filters: newAssignedFilters\n        }).eq(\"id\", machineId);\n        if (error) {\n            addToast({\n                type: \"error\",\n                title: \"Erreur\",\n                description: error.message\n            });\n        } else {\n            fetchData();\n            if ((selectedMachine === null || selectedMachine === void 0 ? void 0 : selectedMachine.id) === machineId) {\n                const updatedMachine = {\n                    ...machineToUpdate,\n                    assignedFilters: newAssignedFilters\n                };\n                setSelectedMachine(updatedMachine);\n            }\n        }\n    };\n    const removeFilterTypeFromMachine = async (machineId, filterTypeId)=>{\n        const machineToUpdate = machines.find((m)=>m.id === machineId);\n        if (!machineToUpdate) return;\n        const newAssignedFilters = machineToUpdate.assignedFilters.filter((af)=>af.filterTypeId !== filterTypeId);\n        const { error } = await _utils_supabase__WEBPACK_IMPORTED_MODULE_3__.supabase.from(\"machines\").update({\n            assigned_filters: newAssignedFilters\n        }).eq(\"id\", machineId);\n        if (error) {\n            addToast({\n                type: \"error\",\n                title: \"Erreur\",\n                description: error.message\n            });\n        } else {\n            fetchData();\n            if ((selectedMachine === null || selectedMachine === void 0 ? void 0 : selectedMachine.id) === machineId) {\n                const updatedMachine = {\n                    ...machineToUpdate,\n                    assignedFilters: newAssignedFilters\n                };\n                setSelectedMachine(updatedMachine);\n            }\n        }\n    };\n    const openConfirmationDialog = (config)=>{\n        setConfirmationDialogConfig({\n            ...config,\n            isOpen: true\n        });\n    };\n    const closeConfirmationDialog = ()=>{\n        setConfirmationDialogConfig((prev)=>({\n                ...prev,\n                isOpen: false\n            }));\n    };\n    const handleConfirm = ()=>{\n        confirmationDialogConfig.onConfirm();\n        closeConfirmationDialog();\n    };\n    const openMachineModal = (machine)=>{\n        setEditingMachine(machine);\n        setIsMachineModalOpen(true);\n    };\n    const closeMachineModal = ()=>setIsMachineModalOpen(false);\n    const saveMachine = async (machineData)=>{\n        const machineToSave = editingMachine ? {\n            id: editingMachine.id,\n            code: machineData.code,\n            designation: machineData.designation,\n            marque: machineData.marque,\n            type: machineData.type,\n            serial_number: machineData.serialNumber || \"\",\n            registration_number: machineData.registrationNumber || \"\",\n            service_hours: machineData.serviceHours,\n            assigned_filters: editingMachine.assignedFilters || []\n        } : {\n            id: \"m-\".concat(Date.now()),\n            code: machineData.code,\n            designation: machineData.designation,\n            marque: machineData.marque,\n            type: machineData.type,\n            serial_number: machineData.serialNumber || \"\",\n            registration_number: machineData.registrationNumber || \"\",\n            service_hours: machineData.serviceHours,\n            assigned_filters: []\n        };\n        const { error } = await _utils_supabase__WEBPACK_IMPORTED_MODULE_3__.supabase.from(\"machines\").upsert(machineToSave);\n        if (error) {\n            addToast({\n                type: \"error\",\n                title: \"Erreur\",\n                description: error.message\n            });\n        } else {\n            fetchData();\n            const successMessage = editingMachine ? \"Engin Mis \\xe0 Jour\" : \"Engin Ajout\\xe9\";\n            addToast({\n                type: \"success\",\n                title: successMessage,\n                description: \"L'engin \".concat(machineToSave.designation, \" a \\xe9t\\xe9 sauvegard\\xe9.\")\n            });\n            if ((selectedMachine === null || selectedMachine === void 0 ? void 0 : selectedMachine.id) === machineToSave.id) {\n                // Transform database format to application format for state\n                const transformedMachine = {\n                    id: machineToSave.id,\n                    code: machineToSave.code,\n                    designation: machineToSave.designation,\n                    marque: machineToSave.marque,\n                    type: machineToSave.type,\n                    serialNumber: machineToSave.serial_number,\n                    registrationNumber: machineToSave.registration_number,\n                    serviceHours: machineToSave.service_hours,\n                    assignedFilters: machineToSave.assigned_filters\n                };\n                setSelectedMachine(transformedMachine);\n            }\n        }\n        closeMachineModal();\n    };\n    const deleteMachine = async (machineId)=>{\n        const { error } = await _utils_supabase__WEBPACK_IMPORTED_MODULE_3__.supabase.from(\"machines\").delete().eq(\"id\", machineId);\n        if (error) {\n            addToast({\n                type: \"error\",\n                title: \"Erreur\",\n                description: error.message\n            });\n        } else {\n            fetchData();\n            addToast({\n                type: \"info\",\n                title: \"Engin Supprim\\xe9\"\n            });\n        }\n    };\n    const closeImportModal = ()=>setIsImportModalOpen(false);\n    const importMachines = async (newMachinesData)=>{\n        const machinesToAdd = newMachinesData.map((nm)=>({\n                id: \"m-\".concat(Date.now(), \"-\").concat(Math.random().toString(36).substr(2, 9)),\n                code: nm.code,\n                designation: nm.designation,\n                marque: nm.marque,\n                type: nm.type,\n                serial_number: nm.serialNumber || null,\n                registration_number: nm.registrationNumber || null,\n                service_hours: nm.serviceHours,\n                assigned_filters: []\n            }));\n        // Filter out any records that might have invalid data\n        const validMachinesToAdd = machinesToAdd.filter((machine)=>machine.code && machine.designation && machine.marque && machine.type);\n        if (validMachinesToAdd.length === 0) {\n            addToast({\n                type: \"warning\",\n                title: \"Importation Annul\\xe9e\",\n                description: \"Aucun engin valide \\xe0 importer.\"\n            });\n            closeImportModal();\n            return;\n        }\n        const { error } = await _utils_supabase__WEBPACK_IMPORTED_MODULE_3__.supabase.from(\"machines\").insert(validMachinesToAdd);\n        if (error) {\n            console.error(\"Error importing machines:\", error);\n            addToast({\n                type: \"error\",\n                title: \"Erreur d'importation\",\n                description: \"\\xc9chec de l'importation des engins: \".concat(error.message)\n            });\n        } else {\n            fetchData();\n            addToast({\n                type: \"success\",\n                title: \"Importation R\\xe9ussie\",\n                description: \"\".concat(validMachinesToAdd.length, \" engins ont \\xe9t\\xe9 ajout\\xe9s.\")\n            });\n        }\n        closeImportModal();\n    };\n    const importMaintenanceRecords = async (newMaintenanceData)=>{\n        try {\n            // First, get all machines to match designations\n            const { data: machinesData, error: machinesError } = await _utils_supabase__WEBPACK_IMPORTED_MODULE_3__.supabase.from(\"machines\").select(\"id, code, designation\");\n            if (machinesError) {\n                throw machinesError;\n            }\n            // Create maps for quick lookup\n            const machineCodeToIdMap = new Map();\n            const machineDesignationToIdMap = new Map();\n            machinesData.forEach((machine)=>{\n                machineCodeToIdMap.set(machine.code, machine.id);\n                machineDesignationToIdMap.set(machine.designation.toLowerCase(), machine.id);\n            });\n            // Track records that couldn't be matched for better feedback\n            let unmatchedRecordsCount = 0;\n            const unmatchedRecords = [];\n            // Create maintenance records for each imported item\n            const maintenanceRecordsToAdd = newMaintenanceData.map((record)=>{\n                // Try to find the machine ID by designation\n                let machineId = undefined; // Use undefined instead of null\n                if (record.machineDesignation) {\n                    // First try exact match with designation\n                    machineId = machineDesignationToIdMap.get(record.machineDesignation.toLowerCase()) || undefined;\n                    // If not found, try partial match\n                    if (!machineId) {\n                        for (const [designation, id] of machineDesignationToIdMap.entries()){\n                            if (record.machineDesignation.toLowerCase().includes(designation) || designation.includes(record.machineDesignation.toLowerCase())) {\n                                machineId = id;\n                                break;\n                            }\n                        }\n                    }\n                    // If still not found, try to match with machine codes\n                    if (!machineId) {\n                        machineId = machineCodeToIdMap.get(record.machineDesignation) || undefined;\n                    }\n                    // If still not found, collect for feedback\n                    if (!machineId) {\n                        unmatchedRecordsCount++;\n                        unmatchedRecords.push(record.machineDesignation);\n                    }\n                } else {\n                    // No machine designation provided\n                    unmatchedRecordsCount++;\n                    unmatchedRecords.push(\"Aucune d\\xe9signation fournie\");\n                }\n                // Only include machine_id in the record if it's not undefined\n                const baseRecord = {\n                    id: \"maint-\".concat(Date.now(), \"-\").concat(Math.random().toString(36).substr(2, 9)),\n                    date: record.date,\n                    service_hours: record.serviceHours,\n                    maintenance_range: record.maintenanceRange,\n                    filters_used: []\n                };\n                // Add machine_id only if it's defined\n                if (machineId !== undefined) {\n                    return {\n                        ...baseRecord,\n                        machine_id: machineId\n                    };\n                } else {\n                    return baseRecord;\n                }\n            }).filter((record)=>record.date && record.date !== \"Invalid Date\"); // Filter out records with invalid dates\n            // Insert all records (including those without matched machines)\n            if (maintenanceRecordsToAdd.length > 0) {\n                const { data, error } = await _utils_supabase__WEBPACK_IMPORTED_MODULE_3__.supabase.from(\"maintenance_records\").insert(maintenanceRecordsToAdd) // Cast to any to avoid type issues\n                .select();\n                if (error) {\n                    throw error;\n                }\n                // Refresh data to show the new records\n                await fetchData();\n                // Show success message with details about unmatched records\n                let description = \"Donn\\xe9es de maintenance import\\xe9es avec succ\\xe8s. \".concat(maintenanceRecordsToAdd.length, \" enregistrements ont \\xe9t\\xe9 ajout\\xe9s \\xe0 la table de maintenance.\");\n                if (unmatchedRecordsCount > 0) {\n                    description += \" \".concat(unmatchedRecordsCount, \" enregistrement(s) n'ont pas pu \\xeatre associ\\xe9s \\xe0 un engin existant et seront import\\xe9s sans association.\");\n                }\n                addToast({\n                    type: \"success\",\n                    title: \"Importation de Maintenance\",\n                    description\n                });\n                console.log(\"Imported maintenance records:\", data);\n            } else {\n                // Show message if no records to import\n                addToast({\n                    type: \"info\",\n                    title: \"Importation de Maintenance\",\n                    description: \"Aucun enregistrement de maintenance \\xe0 importer.\"\n                });\n            }\n        } catch (error) {\n            console.error(\"Error importing maintenance records:\", error);\n            addToast({\n                type: \"error\",\n                title: \"Erreur d'importation\",\n                description: \"\\xc9chec de l'importation des donn\\xe9es de maintenance: \".concat(error.message)\n            });\n        }\n        // Log the data for debugging\n        console.log(\"Maintenance data to import:\", newMaintenanceData);\n        closeImportModal();\n    };\n    const openFilterGroupModal = (group)=>{\n        setEditingFilterGroup(group);\n        setIsFilterGroupModalOpen(true);\n    };\n    const closeFilterGroupModal = ()=>setIsFilterGroupModalOpen(false);\n    const saveFilterGroup = async (groupData)=>{\n        const groupToSave = \"id\" in groupData && groupData.id ? {\n            id: groupData.id,\n            name: groupData.name,\n            filter_type: groupData.filterType,\n            original_reference_id: groupData.originalReferenceId,\n            references: groupData.references\n        } : {\n            id: \"fg-\".concat(Date.now()),\n            name: groupData.name,\n            filter_type: groupData.filterType,\n            original_reference_id: groupData.originalReferenceId,\n            references: groupData.references\n        };\n        const { error } = await _utils_supabase__WEBPACK_IMPORTED_MODULE_3__.supabase.from(\"filter_groups\").upsert(groupToSave);\n        if (error) {\n            addToast({\n                type: \"error\",\n                title: \"Erreur\",\n                description: error.message\n            });\n        } else {\n            fetchData();\n            const successMessage = \"id\" in groupData && groupData.id ? \"Groupe Mis \\xe0 Jour\" : \"Groupe Cr\\xe9\\xe9\";\n            addToast({\n                type: \"success\",\n                title: successMessage,\n                description: \"Le groupe \".concat(groupToSave.name, \" a \\xe9t\\xe9 sauvegard\\xe9.\")\n            });\n        }\n        closeFilterGroupModal();\n    };\n    const deleteFilterGroup = async (groupId)=>{\n        const { error } = await _utils_supabase__WEBPACK_IMPORTED_MODULE_3__.supabase.from(\"filter_groups\").delete().eq(\"id\", groupId);\n        if (error) {\n            addToast({\n                type: \"error\",\n                title: \"Erreur\",\n                description: error.message\n            });\n        } else {\n            // Also need to un-assign from machines. This is a non-atomic operation for simplicity.\n            machines.forEach(async (m)=>{\n                if (m.assignedFilters.some((af)=>af.filterGroupId === groupId)) {\n                    const newAssigned = m.assignedFilters.map((af)=>af.filterGroupId === groupId ? {\n                            ...af,\n                            filterGroupId: null\n                        } : af);\n                    await _utils_supabase__WEBPACK_IMPORTED_MODULE_3__.supabase.from(\"machines\").update({\n                        assigned_filters: newAssigned\n                    }).eq(\"id\", m.id);\n                }\n            });\n            fetchData();\n            addToast({\n                type: \"info\",\n                title: \"Groupe Supprim\\xe9\"\n            });\n        }\n    };\n    const openMaintenanceModal = function(record) {\n        let viewOnly = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;\n        setEditingMaintenanceRecord(record);\n        setIsMaintenanceViewOnly(viewOnly);\n        setIsMaintenanceModalOpen(true);\n    };\n    const closeMaintenanceModal = ()=>setIsMaintenanceModalOpen(false);\n    const saveMaintenanceRecord = async (recordData)=>{\n        const recordToSave = \"id\" in recordData && recordData.id ? {\n            id: recordData.id,\n            machine_id: recordData.machineId,\n            date: recordData.date,\n            service_hours: recordData.serviceHours,\n            maintenance_range: recordData.maintenanceRange,\n            filters_used: recordData.filtersUsed\n        } : {\n            id: \"maint-\".concat(Date.now()),\n            machine_id: recordData.machineId,\n            date: recordData.date,\n            service_hours: recordData.serviceHours,\n            maintenance_range: recordData.maintenanceRange,\n            filters_used: recordData.filtersUsed\n        };\n        const { error } = await _utils_supabase__WEBPACK_IMPORTED_MODULE_3__.supabase.from(\"maintenance_records\").upsert(recordToSave);\n        if (error) {\n            addToast({\n                type: \"error\",\n                title: \"Erreur\",\n                description: error.message\n            });\n        } else {\n            const machine = machines.find((m)=>m.id === recordData.machineId);\n            if (machine && recordData.serviceHours > machine.serviceHours) {\n                await _utils_supabase__WEBPACK_IMPORTED_MODULE_3__.supabase.from(\"machines\").update({\n                    service_hours: recordData.serviceHours\n                }).eq(\"id\", machine.id);\n            }\n            fetchData();\n            const successMessage = \"id\" in recordData && recordData.id ? \"Maintenance Mise \\xe0 Jour\" : \"Maintenance Enregistr\\xe9e\";\n            addToast({\n                type: \"success\",\n                title: successMessage\n            });\n        }\n        closeMaintenanceModal();\n    };\n    const deleteMaintenanceRecord = async (recordId)=>{\n        const { error } = await _utils_supabase__WEBPACK_IMPORTED_MODULE_3__.supabase.from(\"maintenance_records\").delete().eq(\"id\", recordId);\n        if (error) {\n            addToast({\n                type: \"error\",\n                title: \"Erreur\",\n                description: error.message\n            });\n        } else {\n            fetchData();\n            addToast({\n                type: \"info\",\n                title: \"Enregistrement Supprim\\xe9\"\n            });\n        }\n    };\n    const handleNotificationClick = (notification)=>{\n        setNotifications((prev)=>prev.map((n)=>n.id === notification.id ? {\n                    ...n,\n                    read: true\n                } : n));\n        if (notification.type === \"maintenance\") {\n            selectMachine(notification.entityId);\n        } else if (notification.type === \"stock\") {\n            navigateToFilterGroup(notification.entityId);\n        }\n    };\n    const markAllNotificationsAsRead = ()=>{\n        setNotifications((prev)=>prev.map((n)=>({\n                    ...n,\n                    read: true\n                })));\n    };\n    const openAddStockModal = (info)=>{\n        setStockUpdateInfo(info);\n        setIsAddStockModalOpen(true);\n    };\n    const closeAddStockModal = ()=>setIsAddStockModalOpen(false);\n    const addStock = async (quantity)=>{\n        if (!stockUpdateInfo) return;\n        const { filterReference, filterGroupId } = stockUpdateInfo;\n        const groupToUpdate = filterGroups.find((g)=>g.id === filterGroupId);\n        if (!groupToUpdate) return;\n        const newReferences = groupToUpdate.references.map((ref)=>ref.id === filterReference.id ? {\n                ...ref,\n                stock: ref.stock + quantity\n            } : ref);\n        const { error } = await _utils_supabase__WEBPACK_IMPORTED_MODULE_3__.supabase.from(\"filter_groups\").update({\n            references: newReferences\n        }).eq(\"id\", filterGroupId);\n        if (error) {\n            addToast({\n                type: \"error\",\n                title: \"Erreur\",\n                description: error.message\n            });\n        } else {\n            fetchData();\n            addToast({\n                type: \"success\",\n                title: \"Stock Ajout\\xe9\",\n                description: \"\".concat(quantity, \" unit\\xe9(s) ajout\\xe9e(s) pour \").concat(filterReference.reference, \".\")\n            });\n        }\n        closeAddStockModal();\n    };\n    const setTheme = (themeId)=>{\n        _setTheme(themeId);\n        if (themeId.startsWith(\"custom-\")) {\n            const saved = savedThemes.find((t)=>t.id === themeId);\n            if (saved) setCustomColors(saved.colors);\n        }\n    };\n    const openThemeCustomizer = (themeToEdit)=>{\n        setEditingCustomTheme(themeToEdit);\n        setCustomColors(themeToEdit ? themeToEdit.colors : defaultCustomColors);\n        setIsThemeCustomizerOpen(true);\n    };\n    const closeThemeCustomizer = ()=>{\n        setTheme(theme);\n        setIsThemeCustomizerOpen(false);\n    };\n    const saveCustomTheme = (themeData)=>{\n        if (themeData.id) {\n            const updatedThemes = savedThemes.map((t)=>t.id === themeData.id ? {\n                    ...t,\n                    ...themeData\n                } : t);\n            setSavedThemes(updatedThemes);\n            setTheme(themeData.id);\n        } else {\n            const newTheme = {\n                ...themeData,\n                id: \"custom-\".concat(Date.now())\n            };\n            setSavedThemes([\n                ...savedThemes,\n                newTheme\n            ]);\n            setTheme(newTheme.id);\n        }\n        addToast({\n            type: \"success\",\n            title: \"Th\\xe8me Enregistr\\xe9\",\n            description: 'Le th\\xe8me \"'.concat(themeData.name, '\" a \\xe9t\\xe9 sauvegard\\xe9.')\n        });\n    };\n    const deleteCustomTheme = (themeId)=>{\n        setSavedThemes(savedThemes.filter((t)=>t.id !== themeId));\n        if (theme === themeId) {\n            setTheme(\"default-light\");\n        }\n        addToast({\n            type: \"info\",\n            title: \"Th\\xe8me Supprim\\xe9\"\n        });\n    };\n    const actions = {\n        setCurrentView,\n        toggleSidebar,\n        closeSidebar,\n        selectMachine,\n        assignFilterToMachine,\n        addFilterTypeToMachine,\n        removeFilterTypeFromMachine,\n        openConfirmationDialog,\n        closeConfirmationDialog,\n        handleConfirm,\n        openMachineModal,\n        closeMachineModal,\n        saveMachine,\n        deleteMachine,\n        openFilterGroupModal,\n        closeFilterGroupModal,\n        saveFilterGroup,\n        deleteFilterGroup,\n        openMaintenanceModal,\n        closeMaintenanceModal,\n        saveMaintenanceRecord,\n        deleteMaintenanceRecord,\n        navigateToFilterGroup,\n        clearHighlightedFilterGroup: ()=>setHighlightedFilterGroupId(null),\n        handleNotificationClick,\n        markAllNotificationsAsRead,\n        openAIAssistant: ()=>setIsAIAssistantOpen(true),\n        closeAIAssistant: ()=>setIsAIAssistantOpen(false),\n        openScanner: ()=>setIsScannerOpen(true),\n        closeScanner: ()=>setIsScannerOpen(false),\n        addToast,\n        removeToast,\n        openAddStockModal,\n        closeAddStockModal,\n        addStock,\n        setTheme,\n        openThemeCustomizer,\n        closeThemeCustomizer,\n        saveCustomTheme,\n        deleteCustomTheme,\n        openImportModal: ()=>setIsImportModalOpen(true),\n        closeImportModal,\n        importMachines,\n        importMaintenanceRecords\n    };\n    const state = {\n        isLoading,\n        currentView,\n        machines,\n        filterGroups,\n        filterTypes,\n        selectedMachine,\n        maintenanceRecords,\n        theme,\n        customColors,\n        savedThemes,\n        highlightedFilterGroupId,\n        isSidebarOpen,\n        notifications,\n        toasts,\n        isScannerOpen,\n        isAIAssistantOpen,\n        isMachineModalOpen,\n        editingMachine,\n        isFilterGroupModalOpen,\n        editingFilterGroup,\n        isMaintenanceModalOpen,\n        editingMaintenanceRecord,\n        isMaintenanceViewOnly,\n        isAddStockModalOpen,\n        stockUpdateInfo,\n        isThemeCustomizerOpen,\n        editingCustomTheme,\n        isImportModalOpen,\n        confirmationDialogConfig\n    };\n    return {\n        state,\n        actions\n    };\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2hvb2tzL3VzZUFwcExvZ2ljLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7cUZBRXlEO0FBZXZDO0FBQzhDO0FBQ25CO0FBUzdDLE1BQU1NLGtCQUFrQixDQUFJQyxLQUFhQztJQUN2QyxJQUFJO1FBQ0YsMENBQTBDO1FBQzFDLElBQUksTUFBNkIsSUFBSSxPQUFPQyxpQkFBaUIsYUFBYTtZQUN4RSxPQUFPRDtRQUNUO1FBRUEsTUFBTUUsY0FBY0QsYUFBYUUsT0FBTyxDQUFDSjtRQUN6QyxJQUFJRyxhQUFhO1lBQ2YsSUFBSTtnQkFDRixPQUFPRSxLQUFLQyxLQUFLLENBQUNIO1lBQ3BCLEVBQUUsT0FBT0ksR0FBRztnQkFDVixJQUFJUCxRQUFRLHdCQUF3QixDQUFDRyxZQUFZSyxVQUFVLENBQUMsTUFBTTtvQkFDaEVDLFFBQVFDLElBQUksQ0FBQztvQkFDYixPQUFPUDtnQkFDVDtnQkFDQSxNQUFNSTtZQUNSO1FBQ0Y7SUFDRixFQUFFLE9BQU9JLE9BQU87UUFDZEYsUUFBUUUsS0FBSyxDQUFDLHNDQUEwQyxPQUFKWCxLQUFJLE9BQUtXO0lBQy9EO0lBQ0EsT0FBT1Y7QUFDVDtBQUVPLE1BQU1XLHNCQUFvQztJQUMvQ0MsWUFBWTtJQUNaQyxZQUFZO0lBQ1pDLHFCQUFxQjtJQUNyQkMsTUFBTTtJQUNOQyxnQkFBZ0I7SUFDaEJDLFNBQVM7SUFDVEMsbUJBQW1CO0lBQ25CQyxRQUFRO0lBQ1JDLGFBQWE7SUFDYkMsdUJBQXVCO0lBQ3ZCQyxRQUFRO0lBQ1JDLE9BQU87SUFDUEMsTUFBTTtJQUNOQyxhQUFhO1FBQ1g7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO0tBQ0Q7QUFDSCxFQUFFO0FBRUssTUFBTUMsY0FBYztJQUN6QixNQUFNLENBQUNDLFdBQVdDLGFBQWEsR0FBR3BDLCtDQUFRQSxDQUFDO0lBQzNDLE1BQU0sQ0FBQ3FDLGFBQWFDLGVBQWUsR0FBR3RDLCtDQUFRQSxDQUFPRyx3Q0FBSUEsQ0FBQ29DLFNBQVM7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QUNGO0lBRUEsT0FBTztRQUFFcU07UUFBT1A7SUFBUTtBQUMxQixFQUFFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL2hvb2tzL3VzZUFwcExvZ2ljLnRzP2M4MTkiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2UgY2xpZW50XCI7XHJcblxyXG5pbXBvcnQgeyB1c2VTdGF0ZSwgdXNlRWZmZWN0LCB1c2VDYWxsYmFjayB9IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQge1xyXG4gIE1hY2hpbmUsXHJcbiAgRmlsdGVyR3JvdXAsXHJcbiAgRmlsdGVyVHlwZSxcclxuICBWaWV3LFxyXG4gIEZpbHRlclJlZmVyZW5jZSxcclxuICBBc3NpZ25lZEZpbHRlcixcclxuICBUaGVtZSxcclxuICBNYWludGVuYW5jZVJlY29yZCxcclxuICBOb3RpZmljYXRpb24sXHJcbiAgVG9hc3QsXHJcbiAgU3RvY2tVcGRhdGVJbmZvLFxyXG4gIEN1c3RvbUNvbG9ycyxcclxuICBTYXZlZFRoZW1lLFxyXG59IGZyb20gXCIuLi90eXBlc1wiO1xyXG5pbXBvcnQgeyBjYWxjdWxhdGVOZXh0TWFpbnRlbmFuY2UgfSBmcm9tIFwiLi4vdXRpbHMvbWFpbnRlbmFuY2VcIjtcclxuaW1wb3J0IHsgc3VwYWJhc2UgfSBmcm9tIFwiLi4vdXRpbHMvc3VwYWJhc2VcIjtcclxuXHJcbmludGVyZmFjZSBDb25maXJtYXRpb25EaWFsb2dDb25maWcge1xyXG4gIGlzT3BlbjogYm9vbGVhbjtcclxuICB0aXRsZTogc3RyaW5nO1xyXG4gIGRlc2NyaXB0aW9uOiBzdHJpbmc7XHJcbiAgb25Db25maXJtOiAoKSA9PiB2b2lkO1xyXG59XHJcblxyXG5jb25zdCBsb2FkRnJvbVN0b3JhZ2UgPSA8VD4oa2V5OiBzdHJpbmcsIGRlZmF1bHRWYWx1ZTogVCk6IFQgPT4ge1xyXG4gIHRyeSB7XHJcbiAgICAvLyBDaGVjayBpZiB3ZSdyZSBpbiBhIGJyb3dzZXIgZW52aXJvbm1lbnRcclxuICAgIGlmICh0eXBlb2Ygd2luZG93ID09PSBcInVuZGVmaW5lZFwiIHx8IHR5cGVvZiBsb2NhbFN0b3JhZ2UgPT09IFwidW5kZWZpbmVkXCIpIHtcclxuICAgICAgcmV0dXJuIGRlZmF1bHRWYWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBzdG9yZWRWYWx1ZSA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKGtleSk7XHJcbiAgICBpZiAoc3RvcmVkVmFsdWUpIHtcclxuICAgICAgdHJ5IHtcclxuICAgICAgICByZXR1cm4gSlNPTi5wYXJzZShzdG9yZWRWYWx1ZSk7XHJcbiAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICBpZiAoa2V5ID09PSBcImdlc3RpZmlsdHJlcy10aGVtZVwiICYmICFzdG9yZWRWYWx1ZS5zdGFydHNXaXRoKCdcIicpKSB7XHJcbiAgICAgICAgICBjb25zb2xlLndhcm4oXCJPbGQgdGhlbWUgZm9ybWF0IGRldGVjdGVkLCBtaWdyYXRpbmcuXCIpO1xyXG4gICAgICAgICAgcmV0dXJuIHN0b3JlZFZhbHVlIGFzIFQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRocm93IGU7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgY29uc29sZS5lcnJvcihgRXJyb3IgcHJvY2Vzc2luZyBsb2NhbFN0b3JhZ2Uga2V5IFwiJHtrZXl9XCI6YCwgZXJyb3IpO1xyXG4gIH1cclxuICByZXR1cm4gZGVmYXVsdFZhbHVlO1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IGRlZmF1bHRDdXN0b21Db2xvcnM6IEN1c3RvbUNvbG9ycyA9IHtcclxuICBiYWNrZ3JvdW5kOiBcIiNmOGZhZmNcIixcclxuICBmb3JlZ3JvdW5kOiBcIiMwZjE3MmFcIixcclxuICBmb3JlZ3JvdW5kU2Vjb25kYXJ5OiBcIiM2NDc0OGJcIixcclxuICBjYXJkOiBcIiNmZmZmZmZcIixcclxuICBjYXJkRm9yZWdyb3VuZDogXCIjMGYxNzJhXCIsXHJcbiAgcHJpbWFyeTogXCIjZjk3MzE2XCIsXHJcbiAgcHJpbWFyeUZvcmVncm91bmQ6IFwiI2Y4ZmFmY1wiLFxyXG4gIGFjY2VudDogXCIjZjFmNWY5XCIsXHJcbiAgZGVzdHJ1Y3RpdmU6IFwiI2VmNDQ0NFwiLFxyXG4gIGRlc3RydWN0aXZlRm9yZWdyb3VuZDogXCIjZjhmYWZjXCIsXHJcbiAgYm9yZGVyOiBcIiNlMmU4ZjBcIixcclxuICBpbnB1dDogXCIjZjFmNWY5XCIsXHJcbiAgcmluZzogXCIjZjk3MzE2XCIsXHJcbiAgY2FyZEJvcmRlcnM6IFtcclxuICAgIFwiIzNiODJmNlwiLFxyXG4gICAgXCIjMTBiOTgxXCIsXHJcbiAgICBcIiNmNTllMGJcIixcclxuICAgIFwiI2VmNDQ0NFwiLFxyXG4gICAgXCIjOGI1Y2Y2XCIsXHJcbiAgICBcIiMwZWE1ZTlcIixcclxuICBdLFxyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IHVzZUFwcExvZ2ljID0gKCkgPT4ge1xyXG4gIGNvbnN0IFtpc0xvYWRpbmcsIHNldElzTG9hZGluZ10gPSB1c2VTdGF0ZSh0cnVlKTtcclxuICBjb25zdCBbY3VycmVudFZpZXcsIHNldEN1cnJlbnRWaWV3XSA9IHVzZVN0YXRlPFZpZXc+KFZpZXcuREFTSEJPQVJEKTtcclxuICBjb25zdCBbbWFjaGluZXMsIHNldE1hY2hpbmVzXSA9IHVzZVN0YXRlPE1hY2hpbmVbXT4oW10pO1xyXG4gIGNvbnN0IFtmaWx0ZXJHcm91cHMsIHNldEZpbHRlckdyb3Vwc10gPSB1c2VTdGF0ZTxGaWx0ZXJHcm91cFtdPihbXSk7XHJcbiAgY29uc3QgW2ZpbHRlclR5cGVzLCBzZXRGaWx0ZXJUeXBlc10gPSB1c2VTdGF0ZTxGaWx0ZXJUeXBlW10+KFtdKTtcclxuICBjb25zdCBbc2VsZWN0ZWRNYWNoaW5lLCBzZXRTZWxlY3RlZE1hY2hpbmVdID0gdXNlU3RhdGU8TWFjaGluZSB8IG51bGw+KG51bGwpO1xyXG4gIGNvbnN0IFttYWludGVuYW5jZVJlY29yZHMsIHNldE1haW50ZW5hbmNlUmVjb3Jkc10gPSB1c2VTdGF0ZTxcclxuICAgIE1haW50ZW5hbmNlUmVjb3JkW11cclxuICA+KFtdKTtcclxuXHJcbiAgY29uc3QgW3RoZW1lLCBfc2V0VGhlbWVdID0gdXNlU3RhdGU8VGhlbWU+KCgpID0+XHJcbiAgICBsb2FkRnJvbVN0b3JhZ2UoXCJnZXN0aWZpbHRyZXMtdGhlbWVcIiwgXCJkZWZhdWx0LWxpZ2h0XCIpXHJcbiAgKTtcclxuICBjb25zdCBbc2F2ZWRUaGVtZXMsIHNldFNhdmVkVGhlbWVzXSA9IHVzZVN0YXRlPFNhdmVkVGhlbWVbXT4oKCkgPT5cclxuICAgIGxvYWRGcm9tU3RvcmFnZShcImdlc3RpZmlsdHJlcy1zYXZlZFRoZW1lc1wiLCBbXSlcclxuICApO1xyXG4gIGNvbnN0IFtjdXN0b21Db2xvcnMsIHNldEN1c3RvbUNvbG9yc10gPSB1c2VTdGF0ZTxDdXN0b21Db2xvcnM+KCgpID0+IHtcclxuICAgIGNvbnN0IHNhdmVkID0gbG9hZEZyb21TdG9yYWdlKFxyXG4gICAgICBcImdlc3RpZmlsdHJlcy1jdXN0b21Db2xvcnNcIixcclxuICAgICAgZGVmYXVsdEN1c3RvbUNvbG9yc1xyXG4gICAgKTtcclxuICAgIHJldHVybiB7IC4uLmRlZmF1bHRDdXN0b21Db2xvcnMsIC4uLnNhdmVkIH07XHJcbiAgfSk7XHJcblxyXG4gIGNvbnN0IFtoaWdobGlnaHRlZEZpbHRlckdyb3VwSWQsIHNldEhpZ2hsaWdodGVkRmlsdGVyR3JvdXBJZF0gPSB1c2VTdGF0ZTxcclxuICAgIHN0cmluZyB8IG51bGxcclxuICA+KG51bGwpO1xyXG4gIGNvbnN0IFtpc1NpZGViYXJPcGVuLCBzZXRJc1NpZGViYXJPcGVuXSA9IHVzZVN0YXRlKGZhbHNlKTtcclxuICBjb25zdCBbbm90aWZpY2F0aW9ucywgc2V0Tm90aWZpY2F0aW9uc10gPSB1c2VTdGF0ZTxOb3RpZmljYXRpb25bXT4oW10pO1xyXG4gIGNvbnN0IFt0b2FzdHMsIHNldFRvYXN0c10gPSB1c2VTdGF0ZTxUb2FzdFtdPihbXSk7XHJcblxyXG4gIGNvbnN0IFtpc1NjYW5uZXJPcGVuLCBzZXRJc1NjYW5uZXJPcGVuXSA9IHVzZVN0YXRlKGZhbHNlKTtcclxuICBjb25zdCBbaXNBSUFzc2lzdGFudE9wZW4sIHNldElzQUlBc3Npc3RhbnRPcGVuXSA9IHVzZVN0YXRlKGZhbHNlKTtcclxuICBjb25zdCBbaXNNYWNoaW5lTW9kYWxPcGVuLCBzZXRJc01hY2hpbmVNb2RhbE9wZW5dID0gdXNlU3RhdGUoZmFsc2UpO1xyXG4gIGNvbnN0IFtlZGl0aW5nTWFjaGluZSwgc2V0RWRpdGluZ01hY2hpbmVdID0gdXNlU3RhdGU8TWFjaGluZSB8IG51bGw+KG51bGwpO1xyXG5cclxuICBjb25zdCBbaXNGaWx0ZXJHcm91cE1vZGFsT3Blbiwgc2V0SXNGaWx0ZXJHcm91cE1vZGFsT3Blbl0gPSB1c2VTdGF0ZShmYWxzZSk7XHJcbiAgY29uc3QgW2VkaXRpbmdGaWx0ZXJHcm91cCwgc2V0RWRpdGluZ0ZpbHRlckdyb3VwXSA9XHJcbiAgICB1c2VTdGF0ZTxGaWx0ZXJHcm91cCB8IG51bGw+KG51bGwpO1xyXG5cclxuICBjb25zdCBbaXNNYWludGVuYW5jZU1vZGFsT3Blbiwgc2V0SXNNYWludGVuYW5jZU1vZGFsT3Blbl0gPSB1c2VTdGF0ZShmYWxzZSk7XHJcbiAgY29uc3QgW2VkaXRpbmdNYWludGVuYW5jZVJlY29yZCwgc2V0RWRpdGluZ01haW50ZW5hbmNlUmVjb3JkXSA9XHJcbiAgICB1c2VTdGF0ZTxQYXJ0aWFsPE1haW50ZW5hbmNlUmVjb3JkPiB8IG51bGw+KG51bGwpO1xyXG4gIGNvbnN0IFtpc01haW50ZW5hbmNlVmlld09ubHksIHNldElzTWFpbnRlbmFuY2VWaWV3T25seV0gPSB1c2VTdGF0ZShmYWxzZSk7XHJcblxyXG4gIGNvbnN0IFtpc0FkZFN0b2NrTW9kYWxPcGVuLCBzZXRJc0FkZFN0b2NrTW9kYWxPcGVuXSA9IHVzZVN0YXRlKGZhbHNlKTtcclxuICBjb25zdCBbc3RvY2tVcGRhdGVJbmZvLCBzZXRTdG9ja1VwZGF0ZUluZm9dID1cclxuICAgIHVzZVN0YXRlPFN0b2NrVXBkYXRlSW5mbyB8IG51bGw+KG51bGwpO1xyXG5cclxuICBjb25zdCBbaXNUaGVtZUN1c3RvbWl6ZXJPcGVuLCBzZXRJc1RoZW1lQ3VzdG9taXplck9wZW5dID0gdXNlU3RhdGUoZmFsc2UpO1xyXG4gIGNvbnN0IFtlZGl0aW5nQ3VzdG9tVGhlbWUsIHNldEVkaXRpbmdDdXN0b21UaGVtZV0gPVxyXG4gICAgdXNlU3RhdGU8U2F2ZWRUaGVtZSB8IG51bGw+KG51bGwpO1xyXG5cclxuICBjb25zdCBbaXNJbXBvcnRNb2RhbE9wZW4sIHNldElzSW1wb3J0TW9kYWxPcGVuXSA9IHVzZVN0YXRlKGZhbHNlKTtcclxuXHJcbiAgY29uc3QgW2NvbmZpcm1hdGlvbkRpYWxvZ0NvbmZpZywgc2V0Q29uZmlybWF0aW9uRGlhbG9nQ29uZmlnXSA9XHJcbiAgICB1c2VTdGF0ZTxDb25maXJtYXRpb25EaWFsb2dDb25maWc+KHtcclxuICAgICAgaXNPcGVuOiBmYWxzZSxcclxuICAgICAgdGl0bGU6IFwiXCIsXHJcbiAgICAgIGRlc2NyaXB0aW9uOiBcIlwiLFxyXG4gICAgICBvbkNvbmZpcm06ICgpID0+IHt9LFxyXG4gICAgfSk7XHJcblxyXG4gIGNvbnN0IGFkZFRvYXN0ID0gdXNlQ2FsbGJhY2soKHRvYXN0OiBPbWl0PFRvYXN0LCBcImlkXCI+KSA9PiB7XHJcbiAgICBjb25zdCBpZCA9IGB0b2FzdC0ke0RhdGUubm93KCl9YDtcclxuICAgIHNldFRvYXN0cygocHJldikgPT4gWy4uLnByZXYsIHsgaWQsIC4uLnRvYXN0IH1dKTtcclxuICB9LCBbXSk7XHJcblxyXG4gIGNvbnN0IGZldGNoRGF0YSA9IHVzZUNhbGxiYWNrKGFzeW5jICgpID0+IHtcclxuICAgIHRyeSB7XHJcbiAgICAgIGNvbnN0IFtcclxuICAgICAgICBtYWNoaW5lc1JlcyxcclxuICAgICAgICBmaWx0ZXJHcm91cHNSZXMsXHJcbiAgICAgICAgZmlsdGVyVHlwZXNSZXMsXHJcbiAgICAgICAgbWFpbnRlbmFuY2VSZWNvcmRzUmVzLFxyXG4gICAgICBdID0gYXdhaXQgUHJvbWlzZS5hbGwoW1xyXG4gICAgICAgIHN1cGFiYXNlLmZyb20oXCJtYWNoaW5lc1wiKS5zZWxlY3QoXCIqXCIpLFxyXG4gICAgICAgIHN1cGFiYXNlLmZyb20oXCJmaWx0ZXJfZ3JvdXBzXCIpLnNlbGVjdChcIipcIiksXHJcbiAgICAgICAgc3VwYWJhc2UuZnJvbShcImZpbHRlcl90eXBlc1wiKS5zZWxlY3QoXCIqXCIpLFxyXG4gICAgICAgIHN1cGFiYXNlLmZyb20oXCJtYWludGVuYW5jZV9yZWNvcmRzXCIpLnNlbGVjdChcIipcIiksXHJcbiAgICAgIF0pO1xyXG5cclxuICAgICAgaWYgKG1hY2hpbmVzUmVzLmVycm9yKSB0aHJvdyBtYWNoaW5lc1Jlcy5lcnJvcjtcclxuICAgICAgaWYgKGZpbHRlckdyb3Vwc1Jlcy5lcnJvcikgdGhyb3cgZmlsdGVyR3JvdXBzUmVzLmVycm9yO1xyXG4gICAgICBpZiAoZmlsdGVyVHlwZXNSZXMuZXJyb3IpIHRocm93IGZpbHRlclR5cGVzUmVzLmVycm9yO1xyXG4gICAgICBpZiAobWFpbnRlbmFuY2VSZWNvcmRzUmVzLmVycm9yKSB0aHJvdyBtYWludGVuYW5jZVJlY29yZHNSZXMuZXJyb3I7XHJcblxyXG4gICAgICAvLyBUcmFuc2Zvcm0gZGF0YWJhc2UgcmVzdWx0cyB0byBtYXRjaCBhcHBsaWNhdGlvbiB0eXBlc1xyXG4gICAgICBjb25zdCB0cmFuc2Zvcm1lZE1hY2hpbmVzID0gKG1hY2hpbmVzUmVzLmRhdGEgfHwgW10pLm1hcChcclxuICAgICAgICAobWFjaGluZTogYW55KSA9PiAoe1xyXG4gICAgICAgICAgaWQ6IG1hY2hpbmUuaWQsXHJcbiAgICAgICAgICBjb2RlOiBtYWNoaW5lLmNvZGUsXHJcbiAgICAgICAgICBkZXNpZ25hdGlvbjogbWFjaGluZS5kZXNpZ25hdGlvbixcclxuICAgICAgICAgIG1hcnF1ZTogbWFjaGluZS5tYXJxdWUsXHJcbiAgICAgICAgICB0eXBlOiBtYWNoaW5lLnR5cGUsXHJcbiAgICAgICAgICBzZXJpYWxOdW1iZXI6IG1hY2hpbmUuc2VyaWFsX251bWJlciB8fCBcIlwiLFxyXG4gICAgICAgICAgcmVnaXN0cmF0aW9uTnVtYmVyOiBtYWNoaW5lLnJlZ2lzdHJhdGlvbl9udW1iZXIgfHwgXCJcIixcclxuICAgICAgICAgIHNlcnZpY2VIb3VyczogbWFjaGluZS5zZXJ2aWNlX2hvdXJzLFxyXG4gICAgICAgICAgYXNzaWduZWRGaWx0ZXJzOiBtYWNoaW5lLmFzc2lnbmVkX2ZpbHRlcnMgfHwgW10sXHJcbiAgICAgICAgfSlcclxuICAgICAgKTtcclxuXHJcbiAgICAgIGNvbnN0IHRyYW5zZm9ybWVkRmlsdGVyR3JvdXBzID0gKGZpbHRlckdyb3Vwc1Jlcy5kYXRhIHx8IFtdKS5tYXAoXHJcbiAgICAgICAgKGdyb3VwOiBhbnkpID0+ICh7XHJcbiAgICAgICAgICBpZDogZ3JvdXAuaWQsXHJcbiAgICAgICAgICBuYW1lOiBncm91cC5uYW1lLFxyXG4gICAgICAgICAgZmlsdGVyVHlwZTogZ3JvdXAuZmlsdGVyX3R5cGUgfHwgXCJcIixcclxuICAgICAgICAgIG9yaWdpbmFsUmVmZXJlbmNlSWQ6IGdyb3VwLm9yaWdpbmFsX3JlZmVyZW5jZV9pZCxcclxuICAgICAgICAgIHJlZmVyZW5jZXM6IGdyb3VwW1wicmVmZXJlbmNlc1wiXSB8fCBbXSxcclxuICAgICAgICB9KVxyXG4gICAgICApO1xyXG5cclxuICAgICAgY29uc3QgdHJhbnNmb3JtZWRNYWludGVuYW5jZVJlY29yZHMgPSAoXHJcbiAgICAgICAgbWFpbnRlbmFuY2VSZWNvcmRzUmVzLmRhdGEgfHwgW11cclxuICAgICAgKS5tYXAoKHJlY29yZDogYW55KSA9PiAoe1xyXG4gICAgICAgIGlkOiByZWNvcmQuaWQsXHJcbiAgICAgICAgbWFjaGluZUlkOiByZWNvcmQubWFjaGluZV9pZCxcclxuICAgICAgICBtYWludGVuYW5jZVJhbmdlOiByZWNvcmQubWFpbnRlbmFuY2VfcmFuZ2UsXHJcbiAgICAgICAgc2VydmljZUhvdXJzOiByZWNvcmQuc2VydmljZV9ob3VycyxcclxuICAgICAgICBkYXRlOiByZWNvcmQuZGF0ZSxcclxuICAgICAgICBmaWx0ZXJzVXNlZDogcmVjb3JkLmZpbHRlcnNfdXNlZCB8fCBbXSxcclxuICAgICAgfSkpO1xyXG5cclxuICAgICAgc2V0TWFjaGluZXModHJhbnNmb3JtZWRNYWNoaW5lcyk7XHJcbiAgICAgIHNldEZpbHRlckdyb3Vwcyh0cmFuc2Zvcm1lZEZpbHRlckdyb3Vwcyk7XHJcbiAgICAgIHNldEZpbHRlclR5cGVzKGZpbHRlclR5cGVzUmVzLmRhdGEgfHwgW10pO1xyXG4gICAgICBzZXRNYWludGVuYW5jZVJlY29yZHModHJhbnNmb3JtZWRNYWludGVuYW5jZVJlY29yZHMpO1xyXG4gICAgfSBjYXRjaCAoZXJyb3I6IGFueSkge1xyXG4gICAgICBjb25zb2xlLmVycm9yKFwiRmFpbGVkIHRvIGZldGNoIGRhdGEgZnJvbSBTdXBhYmFzZTpcIiwgZXJyb3IpO1xyXG4gICAgICBhZGRUb2FzdCh7XHJcbiAgICAgICAgdHlwZTogXCJlcnJvclwiLFxyXG4gICAgICAgIHRpdGxlOiBcIkVycmV1ciBkZSBjaGFyZ2VtZW50XCIsXHJcbiAgICAgICAgZGVzY3JpcHRpb246IGVycm9yLm1lc3NhZ2UsXHJcbiAgICAgIH0pO1xyXG4gICAgfSBmaW5hbGx5IHtcclxuICAgICAgc2V0SXNMb2FkaW5nKGZhbHNlKTtcclxuICAgIH1cclxuICB9LCBbYWRkVG9hc3RdKTtcclxuXHJcbiAgdXNlRWZmZWN0KCgpID0+IHtcclxuICAgIGZldGNoRGF0YSgpO1xyXG4gIH0sIFtmZXRjaERhdGFdKTtcclxuXHJcbiAgdXNlRWZmZWN0KCgpID0+IHtcclxuICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiICYmIHR5cGVvZiBsb2NhbFN0b3JhZ2UgIT09IFwidW5kZWZpbmVkXCIpIHtcclxuICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oXCJnZXN0aWZpbHRyZXMtdGhlbWVcIiwgSlNPTi5zdHJpbmdpZnkodGhlbWUpKTtcclxuICAgIH1cclxuICB9LCBbdGhlbWVdKTtcclxuXHJcbiAgdXNlRWZmZWN0KCgpID0+IHtcclxuICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiICYmIHR5cGVvZiBsb2NhbFN0b3JhZ2UgIT09IFwidW5kZWZpbmVkXCIpIHtcclxuICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oXHJcbiAgICAgICAgXCJnZXN0aWZpbHRyZXMtY3VzdG9tQ29sb3JzXCIsXHJcbiAgICAgICAgSlNPTi5zdHJpbmdpZnkoY3VzdG9tQ29sb3JzKVxyXG4gICAgICApO1xyXG4gICAgfVxyXG4gIH0sIFtjdXN0b21Db2xvcnNdKTtcclxuXHJcbiAgdXNlRWZmZWN0KCgpID0+IHtcclxuICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiICYmIHR5cGVvZiBsb2NhbFN0b3JhZ2UgIT09IFwidW5kZWZpbmVkXCIpIHtcclxuICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oXHJcbiAgICAgICAgXCJnZXN0aWZpbHRyZXMtc2F2ZWRUaGVtZXNcIixcclxuICAgICAgICBKU09OLnN0cmluZ2lmeShzYXZlZFRoZW1lcylcclxuICAgICAgKTtcclxuICAgIH1cclxuICB9LCBbc2F2ZWRUaGVtZXNdKTtcclxuXHJcbiAgY29uc3QgcmVtb3ZlVG9hc3QgPSAoaWQ6IHN0cmluZykgPT4ge1xyXG4gICAgc2V0VG9hc3RzKChwcmV2KSA9PiBwcmV2LmZpbHRlcigodCkgPT4gdC5pZCAhPT0gaWQpKTtcclxuICB9O1xyXG5cclxuICBjb25zdCBuYXZpZ2F0ZVRvRmlsdGVyR3JvdXAgPSAoZ3JvdXBJZDogc3RyaW5nKSA9PiB7XHJcbiAgICBzZXRJc0FJQXNzaXN0YW50T3BlbihmYWxzZSk7XHJcbiAgICBzZXRDdXJyZW50VmlldyhWaWV3LkZJTFRFUl9NQU5BR0VNRU5UKTtcclxuICAgIHNldEhpZ2hsaWdodGVkRmlsdGVyR3JvdXBJZChncm91cElkKTtcclxuICB9O1xyXG5cclxuICB1c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgY29uc3Qgbm93ID0gbmV3IERhdGUoKS50b0lTT1N0cmluZygpO1xyXG4gICAgY29uc3QgY3VycmVudFZhbGlkQWxlcnRzOiBPbWl0PE5vdGlmaWNhdGlvbiwgXCJyZWFkXCIgfCBcImNyZWF0ZWRBdFwiPltdID0gW107XHJcblxyXG4gICAgY29uc3QgaGlzdG9yeUJ5TWFjaGluZSA9IG5ldyBNYXA8c3RyaW5nLCBNYWludGVuYW5jZVJlY29yZFtdPigpO1xyXG4gICAgbWFpbnRlbmFuY2VSZWNvcmRzLmZvckVhY2goKHJlYykgPT4ge1xyXG4gICAgICBpZiAoIWhpc3RvcnlCeU1hY2hpbmUuaGFzKHJlYy5tYWNoaW5lSWQpKVxyXG4gICAgICAgIGhpc3RvcnlCeU1hY2hpbmUuc2V0KHJlYy5tYWNoaW5lSWQsIFtdKTtcclxuICAgICAgaGlzdG9yeUJ5TWFjaGluZS5nZXQocmVjLm1hY2hpbmVJZCkhLnB1c2gocmVjKTtcclxuICAgIH0pO1xyXG5cclxuICAgIG1hY2hpbmVzLmZvckVhY2goKG1hY2hpbmUpID0+IHtcclxuICAgICAgY29uc3QgaGlzdG9yeSA9IGhpc3RvcnlCeU1hY2hpbmUuZ2V0KG1hY2hpbmUuaWQpIHx8IFtdO1xyXG4gICAgICBjb25zdCBuZXh0TWFpbnQgPSBjYWxjdWxhdGVOZXh0TWFpbnRlbmFuY2UobWFjaGluZSwgaGlzdG9yeSk7XHJcbiAgICAgIGlmIChuZXh0TWFpbnQgJiYgbmV4dE1haW50LmR1ZUluIDw9IDUwKSB7XHJcbiAgICAgICAgY3VycmVudFZhbGlkQWxlcnRzLnB1c2goe1xyXG4gICAgICAgICAgaWQ6IGBtYWludC1hbGVydC0ke21hY2hpbmUuaWR9LSR7bmV4dE1haW50LmhvdXJzfWAsXHJcbiAgICAgICAgICB0eXBlOiBcIm1haW50ZW5hbmNlXCIsXHJcbiAgICAgICAgICBtZXNzYWdlOiBgTCdlbmdpbiAke21hY2hpbmUuZGVzaWduYXRpb259ICgke21hY2hpbmUuY29kZX0pIG7DqWNlc3NpdGUgdW5lIG1haW50ZW5hbmNlIChHYW1tZSAke25leHRNYWludC5nYW1tZX0pIGRhbnMgJHtuZXh0TWFpbnQuZHVlSW59aC5gLFxyXG4gICAgICAgICAgZW50aXR5SWQ6IG1hY2hpbmUuaWQsXHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIGZpbHRlckdyb3Vwcy5mb3JFYWNoKChncm91cCkgPT4ge1xyXG4gICAgICBncm91cC5yZWZlcmVuY2VzLmZvckVhY2goKHJlZikgPT4ge1xyXG4gICAgICAgIGlmIChyZWYuc3RvY2sgPiAwICYmIHJlZi5zdG9jayA8PSA1KSB7XHJcbiAgICAgICAgICBjdXJyZW50VmFsaWRBbGVydHMucHVzaCh7XHJcbiAgICAgICAgICAgIGlkOiBgc3RvY2stYWxlcnQtJHtyZWYuaWR9YCxcclxuICAgICAgICAgICAgdHlwZTogXCJzdG9ja1wiLFxyXG4gICAgICAgICAgICBtZXNzYWdlOiBgTGUgc3RvY2sgcG91ciBsZSBmaWx0cmUgJHtyZWYucmVmZXJlbmNlfSAoJHtyZWYubWFudWZhY3R1cmVyfSkgZXN0IGZhaWJsZSAoJHtyZWYuc3RvY2t9IHVuaXTDqXMpLmAsXHJcbiAgICAgICAgICAgIGVudGl0eUlkOiBncm91cC5pZCxcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBzZXROb3RpZmljYXRpb25zKChwcmV2Tm90aWZpY2F0aW9ucykgPT4ge1xyXG4gICAgICBjb25zdCBwcmV2TWFwID0gbmV3IE1hcChwcmV2Tm90aWZpY2F0aW9ucy5tYXAoKG4pID0+IFtuLmlkLCBuXSkpO1xyXG5cclxuICAgICAgY29uc3QgbmV4dE5vdGlmaWNhdGlvbnMgPSBjdXJyZW50VmFsaWRBbGVydHMubWFwKChhbGVydCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IHByZXYgPSBwcmV2TWFwLmdldChhbGVydC5pZCk7XHJcbiAgICAgICAgaWYgKHByZXYpIHtcclxuICAgICAgICAgIHJldHVybiB7IC4uLnByZXYsIG1lc3NhZ2U6IGFsZXJ0Lm1lc3NhZ2UgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHsgLi4uYWxlcnQsIHJlYWQ6IGZhbHNlLCBjcmVhdGVkQXQ6IG5vdyB9O1xyXG4gICAgICB9KTtcclxuICAgICAgcmV0dXJuIG5leHROb3RpZmljYXRpb25zO1xyXG4gICAgfSk7XHJcbiAgfSwgW21hY2hpbmVzLCBmaWx0ZXJHcm91cHMsIG1haW50ZW5hbmNlUmVjb3Jkc10pO1xyXG5cclxuICBjb25zdCB0b2dnbGVTaWRlYmFyID0gKCkgPT4gc2V0SXNTaWRlYmFyT3BlbigocHJldikgPT4gIXByZXYpO1xyXG4gIGNvbnN0IGNsb3NlU2lkZWJhciA9ICgpID0+IHNldElzU2lkZWJhck9wZW4oZmFsc2UpO1xyXG5cclxuICBjb25zdCBzZWxlY3RNYWNoaW5lID0gKG1hY2hpbmVJZDogc3RyaW5nKSA9PiB7XHJcbiAgICBjb25zdCBtYWNoaW5lID0gbWFjaGluZXMuZmluZCgobSkgPT4gbS5pZCA9PT0gbWFjaGluZUlkKTtcclxuICAgIGlmIChtYWNoaW5lKSB7XHJcbiAgICAgIHNldFNlbGVjdGVkTWFjaGluZShtYWNoaW5lKTtcclxuICAgICAgc2V0Q3VycmVudFZpZXcoVmlldy5NQUNISU5FX0RFVEFJTCk7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgY29uc3QgYXNzaWduRmlsdGVyVG9NYWNoaW5lID0gYXN5bmMgKFxyXG4gICAgbWFjaGluZUlkOiBzdHJpbmcsXHJcbiAgICBmaWx0ZXJUeXBlSWQ6IHN0cmluZyxcclxuICAgIGZpbHRlckdyb3VwSWQ6IHN0cmluZyB8IG51bGxcclxuICApID0+IHtcclxuICAgIGNvbnN0IG1hY2hpbmVUb1VwZGF0ZSA9IG1hY2hpbmVzLmZpbmQoKG0pID0+IG0uaWQgPT09IG1hY2hpbmVJZCk7XHJcbiAgICBpZiAoIW1hY2hpbmVUb1VwZGF0ZSkgcmV0dXJuO1xyXG5cclxuICAgIGNvbnN0IG5ld0Fzc2lnbmVkRmlsdGVycyA9IFsuLi5tYWNoaW5lVG9VcGRhdGUuYXNzaWduZWRGaWx0ZXJzXTtcclxuICAgIGNvbnN0IGV4aXN0aW5nSW5kZXggPSBuZXdBc3NpZ25lZEZpbHRlcnMuZmluZEluZGV4KFxyXG4gICAgICAoYWYpID0+IGFmLmZpbHRlclR5cGVJZCA9PT0gZmlsdGVyVHlwZUlkXHJcbiAgICApO1xyXG5cclxuICAgIGlmIChleGlzdGluZ0luZGV4ID4gLTEpIHtcclxuICAgICAgbmV3QXNzaWduZWRGaWx0ZXJzW2V4aXN0aW5nSW5kZXhdID0ge1xyXG4gICAgICAgIC4uLm5ld0Fzc2lnbmVkRmlsdGVyc1tleGlzdGluZ0luZGV4XSxcclxuICAgICAgICBmaWx0ZXJHcm91cElkLFxyXG4gICAgICB9O1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgbmV3QXNzaWduZWRGaWx0ZXJzLnB1c2goeyBmaWx0ZXJUeXBlSWQsIGZpbHRlckdyb3VwSWQgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgeyBlcnJvciB9ID0gYXdhaXQgc3VwYWJhc2VcclxuICAgICAgLmZyb20oXCJtYWNoaW5lc1wiKVxyXG4gICAgICAudXBkYXRlKHsgYXNzaWduZWRfZmlsdGVyczogbmV3QXNzaWduZWRGaWx0ZXJzIGFzIGFueSB9KVxyXG4gICAgICAuZXEoXCJpZFwiLCBtYWNoaW5lSWQpO1xyXG4gICAgaWYgKGVycm9yKSB7XHJcbiAgICAgIGFkZFRvYXN0KHsgdHlwZTogXCJlcnJvclwiLCB0aXRsZTogXCJFcnJldXJcIiwgZGVzY3JpcHRpb246IGVycm9yLm1lc3NhZ2UgfSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBmZXRjaERhdGEoKTtcclxuICAgICAgaWYgKHNlbGVjdGVkTWFjaGluZT8uaWQgPT09IG1hY2hpbmVJZCkge1xyXG4gICAgICAgIGNvbnN0IHVwZGF0ZWRNYWNoaW5lID0ge1xyXG4gICAgICAgICAgLi4ubWFjaGluZVRvVXBkYXRlLFxyXG4gICAgICAgICAgYXNzaWduZWRGaWx0ZXJzOiBuZXdBc3NpZ25lZEZpbHRlcnMsXHJcbiAgICAgICAgfTtcclxuICAgICAgICBzZXRTZWxlY3RlZE1hY2hpbmUodXBkYXRlZE1hY2hpbmUpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgY29uc3QgYWRkRmlsdGVyVHlwZVRvTWFjaGluZSA9IGFzeW5jIChcclxuICAgIG1hY2hpbmVJZDogc3RyaW5nLFxyXG4gICAgZmlsdGVyVHlwZUlkOiBzdHJpbmdcclxuICApID0+IHtcclxuICAgIGNvbnN0IG1hY2hpbmVUb1VwZGF0ZSA9IG1hY2hpbmVzLmZpbmQoKG0pID0+IG0uaWQgPT09IG1hY2hpbmVJZCk7XHJcbiAgICBpZiAoXHJcbiAgICAgICFtYWNoaW5lVG9VcGRhdGUgfHxcclxuICAgICAgbWFjaGluZVRvVXBkYXRlLmFzc2lnbmVkRmlsdGVycy5zb21lKFxyXG4gICAgICAgIChhZikgPT4gYWYuZmlsdGVyVHlwZUlkID09PSBmaWx0ZXJUeXBlSWRcclxuICAgICAgKVxyXG4gICAgKVxyXG4gICAgICByZXR1cm47XHJcblxyXG4gICAgY29uc3QgbmV3QXNzaWduZWRGaWx0ZXJzID0gW1xyXG4gICAgICAuLi5tYWNoaW5lVG9VcGRhdGUuYXNzaWduZWRGaWx0ZXJzLFxyXG4gICAgICB7IGZpbHRlclR5cGVJZCwgZmlsdGVyR3JvdXBJZDogbnVsbCB9LFxyXG4gICAgXTtcclxuICAgIGNvbnN0IHsgZXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlXHJcbiAgICAgIC5mcm9tKFwibWFjaGluZXNcIilcclxuICAgICAgLnVwZGF0ZSh7IGFzc2lnbmVkX2ZpbHRlcnM6IG5ld0Fzc2lnbmVkRmlsdGVycyBhcyBhbnkgfSlcclxuICAgICAgLmVxKFwiaWRcIiwgbWFjaGluZUlkKTtcclxuXHJcbiAgICBpZiAoZXJyb3IpIHtcclxuICAgICAgYWRkVG9hc3QoeyB0eXBlOiBcImVycm9yXCIsIHRpdGxlOiBcIkVycmV1clwiLCBkZXNjcmlwdGlvbjogZXJyb3IubWVzc2FnZSB9KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGZldGNoRGF0YSgpO1xyXG4gICAgICBpZiAoc2VsZWN0ZWRNYWNoaW5lPy5pZCA9PT0gbWFjaGluZUlkKSB7XHJcbiAgICAgICAgY29uc3QgdXBkYXRlZE1hY2hpbmUgPSB7XHJcbiAgICAgICAgICAuLi5tYWNoaW5lVG9VcGRhdGUsXHJcbiAgICAgICAgICBhc3NpZ25lZEZpbHRlcnM6IG5ld0Fzc2lnbmVkRmlsdGVycyxcclxuICAgICAgICB9O1xyXG4gICAgICAgIHNldFNlbGVjdGVkTWFjaGluZSh1cGRhdGVkTWFjaGluZSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9O1xyXG5cclxuICBjb25zdCByZW1vdmVGaWx0ZXJUeXBlRnJvbU1hY2hpbmUgPSBhc3luYyAoXHJcbiAgICBtYWNoaW5lSWQ6IHN0cmluZyxcclxuICAgIGZpbHRlclR5cGVJZDogc3RyaW5nXHJcbiAgKSA9PiB7XHJcbiAgICBjb25zdCBtYWNoaW5lVG9VcGRhdGUgPSBtYWNoaW5lcy5maW5kKChtKSA9PiBtLmlkID09PSBtYWNoaW5lSWQpO1xyXG4gICAgaWYgKCFtYWNoaW5lVG9VcGRhdGUpIHJldHVybjtcclxuXHJcbiAgICBjb25zdCBuZXdBc3NpZ25lZEZpbHRlcnMgPSBtYWNoaW5lVG9VcGRhdGUuYXNzaWduZWRGaWx0ZXJzLmZpbHRlcihcclxuICAgICAgKGFmKSA9PiBhZi5maWx0ZXJUeXBlSWQgIT09IGZpbHRlclR5cGVJZFxyXG4gICAgKTtcclxuICAgIGNvbnN0IHsgZXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlXHJcbiAgICAgIC5mcm9tKFwibWFjaGluZXNcIilcclxuICAgICAgLnVwZGF0ZSh7IGFzc2lnbmVkX2ZpbHRlcnM6IG5ld0Fzc2lnbmVkRmlsdGVycyBhcyBhbnkgfSlcclxuICAgICAgLmVxKFwiaWRcIiwgbWFjaGluZUlkKTtcclxuXHJcbiAgICBpZiAoZXJyb3IpIHtcclxuICAgICAgYWRkVG9hc3QoeyB0eXBlOiBcImVycm9yXCIsIHRpdGxlOiBcIkVycmV1clwiLCBkZXNjcmlwdGlvbjogZXJyb3IubWVzc2FnZSB9KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGZldGNoRGF0YSgpO1xyXG4gICAgICBpZiAoc2VsZWN0ZWRNYWNoaW5lPy5pZCA9PT0gbWFjaGluZUlkKSB7XHJcbiAgICAgICAgY29uc3QgdXBkYXRlZE1hY2hpbmUgPSB7XHJcbiAgICAgICAgICAuLi5tYWNoaW5lVG9VcGRhdGUsXHJcbiAgICAgICAgICBhc3NpZ25lZEZpbHRlcnM6IG5ld0Fzc2lnbmVkRmlsdGVycyxcclxuICAgICAgICB9O1xyXG4gICAgICAgIHNldFNlbGVjdGVkTWFjaGluZSh1cGRhdGVkTWFjaGluZSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9O1xyXG5cclxuICBjb25zdCBvcGVuQ29uZmlybWF0aW9uRGlhbG9nID0gKFxyXG4gICAgY29uZmlnOiBPbWl0PENvbmZpcm1hdGlvbkRpYWxvZ0NvbmZpZywgXCJpc09wZW5cIiB8IFwib25DbG9zZVwiPlxyXG4gICkgPT4ge1xyXG4gICAgc2V0Q29uZmlybWF0aW9uRGlhbG9nQ29uZmlnKHsgLi4uY29uZmlnLCBpc09wZW46IHRydWUgfSk7XHJcbiAgfTtcclxuXHJcbiAgY29uc3QgY2xvc2VDb25maXJtYXRpb25EaWFsb2cgPSAoKSA9PiB7XHJcbiAgICBzZXRDb25maXJtYXRpb25EaWFsb2dDb25maWcoKHByZXYpID0+ICh7IC4uLnByZXYsIGlzT3BlbjogZmFsc2UgfSkpO1xyXG4gIH07XHJcblxyXG4gIGNvbnN0IGhhbmRsZUNvbmZpcm0gPSAoKSA9PiB7XHJcbiAgICBjb25maXJtYXRpb25EaWFsb2dDb25maWcub25Db25maXJtKCk7XHJcbiAgICBjbG9zZUNvbmZpcm1hdGlvbkRpYWxvZygpO1xyXG4gIH07XHJcblxyXG4gIGNvbnN0IG9wZW5NYWNoaW5lTW9kYWwgPSAobWFjaGluZTogTWFjaGluZSB8IG51bGwpID0+IHtcclxuICAgIHNldEVkaXRpbmdNYWNoaW5lKG1hY2hpbmUpO1xyXG4gICAgc2V0SXNNYWNoaW5lTW9kYWxPcGVuKHRydWUpO1xyXG4gIH07XHJcbiAgY29uc3QgY2xvc2VNYWNoaW5lTW9kYWwgPSAoKSA9PiBzZXRJc01hY2hpbmVNb2RhbE9wZW4oZmFsc2UpO1xyXG5cclxuICBjb25zdCBzYXZlTWFjaGluZSA9IGFzeW5jIChtYWNoaW5lRGF0YToge1xyXG4gICAgY29kZTogc3RyaW5nO1xyXG4gICAgZGVzaWduYXRpb246IHN0cmluZztcclxuICAgIG1hcnF1ZTogc3RyaW5nO1xyXG4gICAgdHlwZTogc3RyaW5nO1xyXG4gICAgc2VyaWFsTnVtYmVyPzogc3RyaW5nO1xyXG4gICAgcmVnaXN0cmF0aW9uTnVtYmVyPzogc3RyaW5nO1xyXG4gICAgc2VydmljZUhvdXJzOiBudW1iZXI7XHJcbiAgfSkgPT4ge1xyXG4gICAgY29uc3QgbWFjaGluZVRvU2F2ZSA9IGVkaXRpbmdNYWNoaW5lXHJcbiAgICAgID8ge1xyXG4gICAgICAgICAgaWQ6IGVkaXRpbmdNYWNoaW5lLmlkLFxyXG4gICAgICAgICAgY29kZTogbWFjaGluZURhdGEuY29kZSxcclxuICAgICAgICAgIGRlc2lnbmF0aW9uOiBtYWNoaW5lRGF0YS5kZXNpZ25hdGlvbixcclxuICAgICAgICAgIG1hcnF1ZTogbWFjaGluZURhdGEubWFycXVlLFxyXG4gICAgICAgICAgdHlwZTogbWFjaGluZURhdGEudHlwZSxcclxuICAgICAgICAgIHNlcmlhbF9udW1iZXI6IG1hY2hpbmVEYXRhLnNlcmlhbE51bWJlciB8fCBcIlwiLFxyXG4gICAgICAgICAgcmVnaXN0cmF0aW9uX251bWJlcjogbWFjaGluZURhdGEucmVnaXN0cmF0aW9uTnVtYmVyIHx8IFwiXCIsXHJcbiAgICAgICAgICBzZXJ2aWNlX2hvdXJzOiBtYWNoaW5lRGF0YS5zZXJ2aWNlSG91cnMsXHJcbiAgICAgICAgICBhc3NpZ25lZF9maWx0ZXJzOiBlZGl0aW5nTWFjaGluZS5hc3NpZ25lZEZpbHRlcnMgfHwgW10sXHJcbiAgICAgICAgfVxyXG4gICAgICA6IHtcclxuICAgICAgICAgIGlkOiBgbS0ke0RhdGUubm93KCl9YCxcclxuICAgICAgICAgIGNvZGU6IG1hY2hpbmVEYXRhLmNvZGUsXHJcbiAgICAgICAgICBkZXNpZ25hdGlvbjogbWFjaGluZURhdGEuZGVzaWduYXRpb24sXHJcbiAgICAgICAgICBtYXJxdWU6IG1hY2hpbmVEYXRhLm1hcnF1ZSxcclxuICAgICAgICAgIHR5cGU6IG1hY2hpbmVEYXRhLnR5cGUsXHJcbiAgICAgICAgICBzZXJpYWxfbnVtYmVyOiBtYWNoaW5lRGF0YS5zZXJpYWxOdW1iZXIgfHwgXCJcIixcclxuICAgICAgICAgIHJlZ2lzdHJhdGlvbl9udW1iZXI6IG1hY2hpbmVEYXRhLnJlZ2lzdHJhdGlvbk51bWJlciB8fCBcIlwiLFxyXG4gICAgICAgICAgc2VydmljZV9ob3VyczogbWFjaGluZURhdGEuc2VydmljZUhvdXJzLFxyXG4gICAgICAgICAgYXNzaWduZWRfZmlsdGVyczogW10sXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICBjb25zdCB7IGVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZVxyXG4gICAgICAuZnJvbShcIm1hY2hpbmVzXCIpXHJcbiAgICAgIC51cHNlcnQobWFjaGluZVRvU2F2ZSBhcyBhbnkpO1xyXG5cclxuICAgIGlmIChlcnJvcikge1xyXG4gICAgICBhZGRUb2FzdCh7IHR5cGU6IFwiZXJyb3JcIiwgdGl0bGU6IFwiRXJyZXVyXCIsIGRlc2NyaXB0aW9uOiBlcnJvci5tZXNzYWdlIH0pO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgZmV0Y2hEYXRhKCk7XHJcbiAgICAgIGNvbnN0IHN1Y2Nlc3NNZXNzYWdlID0gZWRpdGluZ01hY2hpbmVcclxuICAgICAgICA/IFwiRW5naW4gTWlzIMOgIEpvdXJcIlxyXG4gICAgICAgIDogXCJFbmdpbiBBam91dMOpXCI7XHJcbiAgICAgIGFkZFRvYXN0KHtcclxuICAgICAgICB0eXBlOiBcInN1Y2Nlc3NcIixcclxuICAgICAgICB0aXRsZTogc3VjY2Vzc01lc3NhZ2UsXHJcbiAgICAgICAgZGVzY3JpcHRpb246IGBMJ2VuZ2luICR7bWFjaGluZVRvU2F2ZS5kZXNpZ25hdGlvbn0gYSDDqXTDqSBzYXV2ZWdhcmTDqS5gLFxyXG4gICAgICB9KTtcclxuICAgICAgaWYgKHNlbGVjdGVkTWFjaGluZT8uaWQgPT09IG1hY2hpbmVUb1NhdmUuaWQpIHtcclxuICAgICAgICAvLyBUcmFuc2Zvcm0gZGF0YWJhc2UgZm9ybWF0IHRvIGFwcGxpY2F0aW9uIGZvcm1hdCBmb3Igc3RhdGVcclxuICAgICAgICBjb25zdCB0cmFuc2Zvcm1lZE1hY2hpbmU6IE1hY2hpbmUgPSB7XHJcbiAgICAgICAgICBpZDogbWFjaGluZVRvU2F2ZS5pZCxcclxuICAgICAgICAgIGNvZGU6IG1hY2hpbmVUb1NhdmUuY29kZSxcclxuICAgICAgICAgIGRlc2lnbmF0aW9uOiBtYWNoaW5lVG9TYXZlLmRlc2lnbmF0aW9uLFxyXG4gICAgICAgICAgbWFycXVlOiBtYWNoaW5lVG9TYXZlLm1hcnF1ZSxcclxuICAgICAgICAgIHR5cGU6IG1hY2hpbmVUb1NhdmUudHlwZSxcclxuICAgICAgICAgIHNlcmlhbE51bWJlcjogbWFjaGluZVRvU2F2ZS5zZXJpYWxfbnVtYmVyLFxyXG4gICAgICAgICAgcmVnaXN0cmF0aW9uTnVtYmVyOiBtYWNoaW5lVG9TYXZlLnJlZ2lzdHJhdGlvbl9udW1iZXIsXHJcbiAgICAgICAgICBzZXJ2aWNlSG91cnM6IG1hY2hpbmVUb1NhdmUuc2VydmljZV9ob3VycyxcclxuICAgICAgICAgIGFzc2lnbmVkRmlsdGVyczogbWFjaGluZVRvU2F2ZS5hc3NpZ25lZF9maWx0ZXJzLFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgc2V0U2VsZWN0ZWRNYWNoaW5lKHRyYW5zZm9ybWVkTWFjaGluZSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIGNsb3NlTWFjaGluZU1vZGFsKCk7XHJcbiAgfTtcclxuXHJcbiAgY29uc3QgZGVsZXRlTWFjaGluZSA9IGFzeW5jIChtYWNoaW5lSWQ6IHN0cmluZykgPT4ge1xyXG4gICAgY29uc3QgeyBlcnJvciB9ID0gYXdhaXQgc3VwYWJhc2VcclxuICAgICAgLmZyb20oXCJtYWNoaW5lc1wiKVxyXG4gICAgICAuZGVsZXRlKClcclxuICAgICAgLmVxKFwiaWRcIiwgbWFjaGluZUlkKTtcclxuICAgIGlmIChlcnJvcikge1xyXG4gICAgICBhZGRUb2FzdCh7IHR5cGU6IFwiZXJyb3JcIiwgdGl0bGU6IFwiRXJyZXVyXCIsIGRlc2NyaXB0aW9uOiBlcnJvci5tZXNzYWdlIH0pO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgZmV0Y2hEYXRhKCk7XHJcbiAgICAgIGFkZFRvYXN0KHsgdHlwZTogXCJpbmZvXCIsIHRpdGxlOiBcIkVuZ2luIFN1cHByaW3DqVwiIH0pO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIGNvbnN0IGNsb3NlSW1wb3J0TW9kYWwgPSAoKSA9PiBzZXRJc0ltcG9ydE1vZGFsT3BlbihmYWxzZSk7XHJcblxyXG4gIGNvbnN0IGltcG9ydE1hY2hpbmVzID0gYXN5bmMgKFxyXG4gICAgbmV3TWFjaGluZXNEYXRhOiBPbWl0PE1hY2hpbmUsIFwiaWRcIiB8IFwiYXNzaWduZWRGaWx0ZXJzXCI+W11cclxuICApID0+IHtcclxuICAgIGNvbnN0IG1hY2hpbmVzVG9BZGQgPSBuZXdNYWNoaW5lc0RhdGEubWFwKChubSkgPT4gKHtcclxuICAgICAgaWQ6IGBtLSR7RGF0ZS5ub3coKX0tJHtNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHIoMiwgOSl9YCxcclxuICAgICAgY29kZTogbm0uY29kZSxcclxuICAgICAgZGVzaWduYXRpb246IG5tLmRlc2lnbmF0aW9uLFxyXG4gICAgICBtYXJxdWU6IG5tLm1hcnF1ZSxcclxuICAgICAgdHlwZTogbm0udHlwZSxcclxuICAgICAgc2VyaWFsX251bWJlcjogbm0uc2VyaWFsTnVtYmVyIHx8IG51bGwsIC8vIFVzZSBudWxsIGluc3RlYWQgb2YgZW1wdHkgc3RyaW5nXHJcbiAgICAgIHJlZ2lzdHJhdGlvbl9udW1iZXI6IG5tLnJlZ2lzdHJhdGlvbk51bWJlciB8fCBudWxsLCAvLyBVc2UgbnVsbCBpbnN0ZWFkIG9mIGVtcHR5IHN0cmluZ1xyXG4gICAgICBzZXJ2aWNlX2hvdXJzOiBubS5zZXJ2aWNlSG91cnMsXHJcbiAgICAgIGFzc2lnbmVkX2ZpbHRlcnM6IFtdLFxyXG4gICAgfSkpO1xyXG4gICAgXHJcbiAgICAvLyBGaWx0ZXIgb3V0IGFueSByZWNvcmRzIHRoYXQgbWlnaHQgaGF2ZSBpbnZhbGlkIGRhdGFcclxuICAgIGNvbnN0IHZhbGlkTWFjaGluZXNUb0FkZCA9IG1hY2hpbmVzVG9BZGQuZmlsdGVyKG1hY2hpbmUgPT4gXHJcbiAgICAgIG1hY2hpbmUuY29kZSAmJiBcclxuICAgICAgbWFjaGluZS5kZXNpZ25hdGlvbiAmJiBcclxuICAgICAgbWFjaGluZS5tYXJxdWUgJiYgXHJcbiAgICAgIG1hY2hpbmUudHlwZVxyXG4gICAgKTtcclxuICAgIFxyXG4gICAgaWYgKHZhbGlkTWFjaGluZXNUb0FkZC5sZW5ndGggPT09IDApIHtcclxuICAgICAgYWRkVG9hc3Qoe1xyXG4gICAgICAgIHR5cGU6IFwid2FybmluZ1wiLFxyXG4gICAgICAgIHRpdGxlOiBcIkltcG9ydGF0aW9uIEFubnVsw6llXCIsXHJcbiAgICAgICAgZGVzY3JpcHRpb246IFwiQXVjdW4gZW5naW4gdmFsaWRlIMOgIGltcG9ydGVyLlwiLFxyXG4gICAgICB9KTtcclxuICAgICAgY2xvc2VJbXBvcnRNb2RhbCgpO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBcclxuICAgIGNvbnN0IHsgZXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlXHJcbiAgICAgIC5mcm9tKFwibWFjaGluZXNcIilcclxuICAgICAgLmluc2VydCh2YWxpZE1hY2hpbmVzVG9BZGQgYXMgYW55KTtcclxuICAgICAgXHJcbiAgICBpZiAoZXJyb3IpIHtcclxuICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIGltcG9ydGluZyBtYWNoaW5lczpcIiwgZXJyb3IpO1xyXG4gICAgICBhZGRUb2FzdCh7XHJcbiAgICAgICAgdHlwZTogXCJlcnJvclwiLFxyXG4gICAgICAgIHRpdGxlOiBcIkVycmV1ciBkJ2ltcG9ydGF0aW9uXCIsXHJcbiAgICAgICAgZGVzY3JpcHRpb246IGDDiWNoZWMgZGUgbCdpbXBvcnRhdGlvbiBkZXMgZW5naW5zOiAke2Vycm9yLm1lc3NhZ2V9YCxcclxuICAgICAgfSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBmZXRjaERhdGEoKTtcclxuICAgICAgYWRkVG9hc3Qoe1xyXG4gICAgICAgIHR5cGU6IFwic3VjY2Vzc1wiLFxyXG4gICAgICAgIHRpdGxlOiBcIkltcG9ydGF0aW9uIFLDqXVzc2llXCIsXHJcbiAgICAgICAgZGVzY3JpcHRpb246IGAke3ZhbGlkTWFjaGluZXNUb0FkZC5sZW5ndGh9IGVuZ2lucyBvbnQgw6l0w6kgYWpvdXTDqXMuYCxcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBjbG9zZUltcG9ydE1vZGFsKCk7XHJcbiAgfTtcclxuXHJcbiAgY29uc3QgaW1wb3J0TWFpbnRlbmFuY2VSZWNvcmRzID0gYXN5bmMgKFxyXG4gICAgbmV3TWFpbnRlbmFuY2VEYXRhOiB7XHJcbiAgICAgIGdhbW1lOiBzdHJpbmc7XHJcbiAgICAgIG1haW50ZW5hbmNlUmFuZ2U6IFwiQ1wiIHwgXCJEXCIgfCBcIkVcIiB8IFwiRlwiO1xyXG4gICAgICBzZXJ2aWNlSG91cnM6IG51bWJlcjtcclxuICAgICAgZGF0ZTogc3RyaW5nO1xyXG4gICAgICBtYWNoaW5lRGVzaWduYXRpb24/OiBzdHJpbmc7IC8vIEFkZCBtYWNoaW5lIGRlc2lnbmF0aW9uIHRvIGxpbmsgbWFpbnRlbmFuY2UgdG8gbWFjaGluZVxyXG4gICAgfVtdXHJcbiAgKSA9PiB7XHJcbiAgICB0cnkge1xyXG4gICAgICAvLyBGaXJzdCwgZ2V0IGFsbCBtYWNoaW5lcyB0byBtYXRjaCBkZXNpZ25hdGlvbnNcclxuICAgICAgY29uc3QgeyBkYXRhOiBtYWNoaW5lc0RhdGEsIGVycm9yOiBtYWNoaW5lc0Vycm9yIH0gPSBhd2FpdCBzdXBhYmFzZVxyXG4gICAgICAgIC5mcm9tKFwibWFjaGluZXNcIilcclxuICAgICAgICAuc2VsZWN0KFwiaWQsIGNvZGUsIGRlc2lnbmF0aW9uXCIpO1xyXG5cclxuICAgICAgaWYgKG1hY2hpbmVzRXJyb3IpIHtcclxuICAgICAgICB0aHJvdyBtYWNoaW5lc0Vycm9yO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBDcmVhdGUgbWFwcyBmb3IgcXVpY2sgbG9va3VwXHJcbiAgICAgIGNvbnN0IG1hY2hpbmVDb2RlVG9JZE1hcCA9IG5ldyBNYXA8c3RyaW5nLCBzdHJpbmc+KCk7XHJcbiAgICAgIGNvbnN0IG1hY2hpbmVEZXNpZ25hdGlvblRvSWRNYXAgPSBuZXcgTWFwPHN0cmluZywgc3RyaW5nPigpO1xyXG5cclxuICAgICAgbWFjaGluZXNEYXRhLmZvckVhY2goKG1hY2hpbmU6IGFueSkgPT4ge1xyXG4gICAgICAgIG1hY2hpbmVDb2RlVG9JZE1hcC5zZXQobWFjaGluZS5jb2RlLCBtYWNoaW5lLmlkKTtcclxuICAgICAgICBtYWNoaW5lRGVzaWduYXRpb25Ub0lkTWFwLnNldChcclxuICAgICAgICAgIG1hY2hpbmUuZGVzaWduYXRpb24udG9Mb3dlckNhc2UoKSxcclxuICAgICAgICAgIG1hY2hpbmUuaWRcclxuICAgICAgICApO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIC8vIFRyYWNrIHJlY29yZHMgdGhhdCBjb3VsZG4ndCBiZSBtYXRjaGVkIGZvciBiZXR0ZXIgZmVlZGJhY2tcclxuICAgICAgbGV0IHVubWF0Y2hlZFJlY29yZHNDb3VudCA9IDA7XHJcbiAgICAgIGNvbnN0IHVubWF0Y2hlZFJlY29yZHM6IHN0cmluZ1tdID0gW107XHJcblxyXG4gICAgICAvLyBDcmVhdGUgbWFpbnRlbmFuY2UgcmVjb3JkcyBmb3IgZWFjaCBpbXBvcnRlZCBpdGVtXHJcbiAgICAgIGNvbnN0IG1haW50ZW5hbmNlUmVjb3Jkc1RvQWRkID0gbmV3TWFpbnRlbmFuY2VEYXRhXHJcbiAgICAgICAgLm1hcCgocmVjb3JkKSA9PiB7XHJcbiAgICAgICAgICAvLyBUcnkgdG8gZmluZCB0aGUgbWFjaGluZSBJRCBieSBkZXNpZ25hdGlvblxyXG4gICAgICAgICAgbGV0IG1hY2hpbmVJZDogc3RyaW5nIHwgdW5kZWZpbmVkID0gdW5kZWZpbmVkOyAvLyBVc2UgdW5kZWZpbmVkIGluc3RlYWQgb2YgbnVsbFxyXG5cclxuICAgICAgICAgIGlmIChyZWNvcmQubWFjaGluZURlc2lnbmF0aW9uKSB7XHJcbiAgICAgICAgICAgIC8vIEZpcnN0IHRyeSBleGFjdCBtYXRjaCB3aXRoIGRlc2lnbmF0aW9uXHJcbiAgICAgICAgICAgIG1hY2hpbmVJZCA9XHJcbiAgICAgICAgICAgICAgbWFjaGluZURlc2lnbmF0aW9uVG9JZE1hcC5nZXQoXHJcbiAgICAgICAgICAgICAgICByZWNvcmQubWFjaGluZURlc2lnbmF0aW9uLnRvTG93ZXJDYXNlKClcclxuICAgICAgICAgICAgICApIHx8IHVuZGVmaW5lZDtcclxuXHJcbiAgICAgICAgICAgIC8vIElmIG5vdCBmb3VuZCwgdHJ5IHBhcnRpYWwgbWF0Y2hcclxuICAgICAgICAgICAgaWYgKCFtYWNoaW5lSWQpIHtcclxuICAgICAgICAgICAgICBmb3IgKGNvbnN0IFtcclxuICAgICAgICAgICAgICAgIGRlc2lnbmF0aW9uLFxyXG4gICAgICAgICAgICAgICAgaWQsXHJcbiAgICAgICAgICAgICAgXSBvZiBtYWNoaW5lRGVzaWduYXRpb25Ub0lkTWFwLmVudHJpZXMoKSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICAgICAgICByZWNvcmQubWFjaGluZURlc2lnbmF0aW9uXHJcbiAgICAgICAgICAgICAgICAgICAgLnRvTG93ZXJDYXNlKClcclxuICAgICAgICAgICAgICAgICAgICAuaW5jbHVkZXMoZGVzaWduYXRpb24pIHx8XHJcbiAgICAgICAgICAgICAgICAgIGRlc2lnbmF0aW9uLmluY2x1ZGVzKHJlY29yZC5tYWNoaW5lRGVzaWduYXRpb24udG9Mb3dlckNhc2UoKSlcclxuICAgICAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgICBtYWNoaW5lSWQgPSBpZDtcclxuICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBJZiBzdGlsbCBub3QgZm91bmQsIHRyeSB0byBtYXRjaCB3aXRoIG1hY2hpbmUgY29kZXNcclxuICAgICAgICAgICAgaWYgKCFtYWNoaW5lSWQpIHtcclxuICAgICAgICAgICAgICBtYWNoaW5lSWQgPVxyXG4gICAgICAgICAgICAgICAgbWFjaGluZUNvZGVUb0lkTWFwLmdldChyZWNvcmQubWFjaGluZURlc2lnbmF0aW9uKSB8fCB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIElmIHN0aWxsIG5vdCBmb3VuZCwgY29sbGVjdCBmb3IgZmVlZGJhY2tcclxuICAgICAgICAgICAgaWYgKCFtYWNoaW5lSWQpIHtcclxuICAgICAgICAgICAgICB1bm1hdGNoZWRSZWNvcmRzQ291bnQrKztcclxuICAgICAgICAgICAgICB1bm1hdGNoZWRSZWNvcmRzLnB1c2gocmVjb3JkLm1hY2hpbmVEZXNpZ25hdGlvbik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIE5vIG1hY2hpbmUgZGVzaWduYXRpb24gcHJvdmlkZWRcclxuICAgICAgICAgICAgdW5tYXRjaGVkUmVjb3Jkc0NvdW50Kys7XHJcbiAgICAgICAgICAgIHVubWF0Y2hlZFJlY29yZHMucHVzaChcIkF1Y3VuZSBkw6lzaWduYXRpb24gZm91cm5pZVwiKTtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAvLyBPbmx5IGluY2x1ZGUgbWFjaGluZV9pZCBpbiB0aGUgcmVjb3JkIGlmIGl0J3Mgbm90IHVuZGVmaW5lZFxyXG4gICAgICAgICAgY29uc3QgYmFzZVJlY29yZCA9IHtcclxuICAgICAgICAgICAgaWQ6IGBtYWludC0ke0RhdGUubm93KCl9LSR7TWF0aC5yYW5kb20oKVxyXG4gICAgICAgICAgICAgIC50b1N0cmluZygzNilcclxuICAgICAgICAgICAgICAuc3Vic3RyKDIsIDkpfWAsXHJcbiAgICAgICAgICAgIGRhdGU6IHJlY29yZC5kYXRlLFxyXG4gICAgICAgICAgICBzZXJ2aWNlX2hvdXJzOiByZWNvcmQuc2VydmljZUhvdXJzLFxyXG4gICAgICAgICAgICBtYWludGVuYW5jZV9yYW5nZTogcmVjb3JkLm1haW50ZW5hbmNlUmFuZ2UsXHJcbiAgICAgICAgICAgIGZpbHRlcnNfdXNlZDogW10sIC8vIEVtcHR5IGZvciBub3dcclxuICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgLy8gQWRkIG1hY2hpbmVfaWQgb25seSBpZiBpdCdzIGRlZmluZWRcclxuICAgICAgICAgIGlmIChtYWNoaW5lSWQgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgIC4uLmJhc2VSZWNvcmQsXHJcbiAgICAgICAgICAgICAgbWFjaGluZV9pZDogbWFjaGluZUlkLFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIGJhc2VSZWNvcmQ7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSlcclxuICAgICAgICAuZmlsdGVyKChyZWNvcmQpID0+IHJlY29yZC5kYXRlICYmIHJlY29yZC5kYXRlICE9PSBcIkludmFsaWQgRGF0ZVwiKTsgLy8gRmlsdGVyIG91dCByZWNvcmRzIHdpdGggaW52YWxpZCBkYXRlc1xyXG5cclxuICAgICAgLy8gSW5zZXJ0IGFsbCByZWNvcmRzIChpbmNsdWRpbmcgdGhvc2Ugd2l0aG91dCBtYXRjaGVkIG1hY2hpbmVzKVxyXG4gICAgICBpZiAobWFpbnRlbmFuY2VSZWNvcmRzVG9BZGQubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIGNvbnN0IHsgZGF0YSwgZXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlXHJcbiAgICAgICAgICAuZnJvbShcIm1haW50ZW5hbmNlX3JlY29yZHNcIilcclxuICAgICAgICAgIC5pbnNlcnQobWFpbnRlbmFuY2VSZWNvcmRzVG9BZGQgYXMgYW55KSAvLyBDYXN0IHRvIGFueSB0byBhdm9pZCB0eXBlIGlzc3Vlc1xyXG4gICAgICAgICAgLnNlbGVjdCgpO1xyXG5cclxuICAgICAgICBpZiAoZXJyb3IpIHtcclxuICAgICAgICAgIHRocm93IGVycm9yO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gUmVmcmVzaCBkYXRhIHRvIHNob3cgdGhlIG5ldyByZWNvcmRzXHJcbiAgICAgICAgYXdhaXQgZmV0Y2hEYXRhKCk7XHJcblxyXG4gICAgICAgIC8vIFNob3cgc3VjY2VzcyBtZXNzYWdlIHdpdGggZGV0YWlscyBhYm91dCB1bm1hdGNoZWQgcmVjb3Jkc1xyXG4gICAgICAgIGxldCBkZXNjcmlwdGlvbiA9IGBEb25uw6llcyBkZSBtYWludGVuYW5jZSBpbXBvcnTDqWVzIGF2ZWMgc3VjY8Oocy4gJHttYWludGVuYW5jZVJlY29yZHNUb0FkZC5sZW5ndGh9IGVucmVnaXN0cmVtZW50cyBvbnQgw6l0w6kgYWpvdXTDqXMgw6AgbGEgdGFibGUgZGUgbWFpbnRlbmFuY2UuYDtcclxuXHJcbiAgICAgICAgaWYgKHVubWF0Y2hlZFJlY29yZHNDb3VudCA+IDApIHtcclxuICAgICAgICAgIGRlc2NyaXB0aW9uICs9IGAgJHt1bm1hdGNoZWRSZWNvcmRzQ291bnR9IGVucmVnaXN0cmVtZW50KHMpIG4nb250IHBhcyBwdSDDqnRyZSBhc3NvY2nDqXMgw6AgdW4gZW5naW4gZXhpc3RhbnQgZXQgc2Vyb250IGltcG9ydMOpcyBzYW5zIGFzc29jaWF0aW9uLmA7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBhZGRUb2FzdCh7XHJcbiAgICAgICAgICB0eXBlOiBcInN1Y2Nlc3NcIixcclxuICAgICAgICAgIHRpdGxlOiBcIkltcG9ydGF0aW9uIGRlIE1haW50ZW5hbmNlXCIsXHJcbiAgICAgICAgICBkZXNjcmlwdGlvbixcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgY29uc29sZS5sb2coXCJJbXBvcnRlZCBtYWludGVuYW5jZSByZWNvcmRzOlwiLCBkYXRhKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICAvLyBTaG93IG1lc3NhZ2UgaWYgbm8gcmVjb3JkcyB0byBpbXBvcnRcclxuICAgICAgICBhZGRUb2FzdCh7XHJcbiAgICAgICAgICB0eXBlOiBcImluZm9cIixcclxuICAgICAgICAgIHRpdGxlOiBcIkltcG9ydGF0aW9uIGRlIE1haW50ZW5hbmNlXCIsXHJcbiAgICAgICAgICBkZXNjcmlwdGlvbjogXCJBdWN1biBlbnJlZ2lzdHJlbWVudCBkZSBtYWludGVuYW5jZSDDoCBpbXBvcnRlci5cIixcclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgfSBjYXRjaCAoZXJyb3I6IGFueSkge1xyXG4gICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgaW1wb3J0aW5nIG1haW50ZW5hbmNlIHJlY29yZHM6XCIsIGVycm9yKTtcclxuICAgICAgYWRkVG9hc3Qoe1xyXG4gICAgICAgIHR5cGU6IFwiZXJyb3JcIixcclxuICAgICAgICB0aXRsZTogXCJFcnJldXIgZCdpbXBvcnRhdGlvblwiLFxyXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgw4ljaGVjIGRlIGwnaW1wb3J0YXRpb24gZGVzIGRvbm7DqWVzIGRlIG1haW50ZW5hbmNlOiAke2Vycm9yLm1lc3NhZ2V9YCxcclxuICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gTG9nIHRoZSBkYXRhIGZvciBkZWJ1Z2dpbmdcclxuICAgIGNvbnNvbGUubG9nKFwiTWFpbnRlbmFuY2UgZGF0YSB0byBpbXBvcnQ6XCIsIG5ld01haW50ZW5hbmNlRGF0YSk7XHJcblxyXG4gICAgY2xvc2VJbXBvcnRNb2RhbCgpO1xyXG4gIH07XHJcblxyXG4gIGNvbnN0IG9wZW5GaWx0ZXJHcm91cE1vZGFsID0gKGdyb3VwOiBGaWx0ZXJHcm91cCB8IG51bGwpID0+IHtcclxuICAgIHNldEVkaXRpbmdGaWx0ZXJHcm91cChncm91cCk7XHJcbiAgICBzZXRJc0ZpbHRlckdyb3VwTW9kYWxPcGVuKHRydWUpO1xyXG4gIH07XHJcbiAgY29uc3QgY2xvc2VGaWx0ZXJHcm91cE1vZGFsID0gKCkgPT4gc2V0SXNGaWx0ZXJHcm91cE1vZGFsT3BlbihmYWxzZSk7XHJcblxyXG4gIGNvbnN0IHNhdmVGaWx0ZXJHcm91cCA9IGFzeW5jIChcclxuICAgIGdyb3VwRGF0YTogRmlsdGVyR3JvdXAgfCBPbWl0PEZpbHRlckdyb3VwLCBcImlkXCI+XHJcbiAgKSA9PiB7XHJcbiAgICBjb25zdCBncm91cFRvU2F2ZSA9XHJcbiAgICAgIFwiaWRcIiBpbiBncm91cERhdGEgJiYgZ3JvdXBEYXRhLmlkXHJcbiAgICAgICAgPyB7XHJcbiAgICAgICAgICAgIGlkOiBncm91cERhdGEuaWQsXHJcbiAgICAgICAgICAgIG5hbWU6IGdyb3VwRGF0YS5uYW1lLFxyXG4gICAgICAgICAgICBmaWx0ZXJfdHlwZTogZ3JvdXBEYXRhLmZpbHRlclR5cGUsXHJcbiAgICAgICAgICAgIG9yaWdpbmFsX3JlZmVyZW5jZV9pZDogZ3JvdXBEYXRhLm9yaWdpbmFsUmVmZXJlbmNlSWQsXHJcbiAgICAgICAgICAgIHJlZmVyZW5jZXM6IGdyb3VwRGF0YS5yZWZlcmVuY2VzLFxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIDoge1xyXG4gICAgICAgICAgICBpZDogYGZnLSR7RGF0ZS5ub3coKX1gLFxyXG4gICAgICAgICAgICBuYW1lOiBncm91cERhdGEubmFtZSxcclxuICAgICAgICAgICAgZmlsdGVyX3R5cGU6IGdyb3VwRGF0YS5maWx0ZXJUeXBlLFxyXG4gICAgICAgICAgICBvcmlnaW5hbF9yZWZlcmVuY2VfaWQ6IGdyb3VwRGF0YS5vcmlnaW5hbFJlZmVyZW5jZUlkLFxyXG4gICAgICAgICAgICByZWZlcmVuY2VzOiBncm91cERhdGEucmVmZXJlbmNlcyxcclxuICAgICAgICAgIH07XHJcbiAgICBjb25zdCB7IGVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZVxyXG4gICAgICAuZnJvbShcImZpbHRlcl9ncm91cHNcIilcclxuICAgICAgLnVwc2VydChncm91cFRvU2F2ZSBhcyBhbnkpO1xyXG4gICAgaWYgKGVycm9yKSB7XHJcbiAgICAgIGFkZFRvYXN0KHsgdHlwZTogXCJlcnJvclwiLCB0aXRsZTogXCJFcnJldXJcIiwgZGVzY3JpcHRpb246IGVycm9yLm1lc3NhZ2UgfSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBmZXRjaERhdGEoKTtcclxuICAgICAgY29uc3Qgc3VjY2Vzc01lc3NhZ2UgPVxyXG4gICAgICAgIFwiaWRcIiBpbiBncm91cERhdGEgJiYgZ3JvdXBEYXRhLmlkID8gXCJHcm91cGUgTWlzIMOgIEpvdXJcIiA6IFwiR3JvdXBlIENyw6nDqVwiO1xyXG4gICAgICBhZGRUb2FzdCh7XHJcbiAgICAgICAgdHlwZTogXCJzdWNjZXNzXCIsXHJcbiAgICAgICAgdGl0bGU6IHN1Y2Nlc3NNZXNzYWdlLFxyXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgTGUgZ3JvdXBlICR7Z3JvdXBUb1NhdmUubmFtZX0gYSDDqXTDqSBzYXV2ZWdhcmTDqS5gLFxyXG4gICAgICB9KTtcclxuICAgIH1cclxuICAgIGNsb3NlRmlsdGVyR3JvdXBNb2RhbCgpO1xyXG4gIH07XHJcblxyXG4gIGNvbnN0IGRlbGV0ZUZpbHRlckdyb3VwID0gYXN5bmMgKGdyb3VwSWQ6IHN0cmluZykgPT4ge1xyXG4gICAgY29uc3QgeyBlcnJvciB9ID0gYXdhaXQgc3VwYWJhc2VcclxuICAgICAgLmZyb20oXCJmaWx0ZXJfZ3JvdXBzXCIpXHJcbiAgICAgIC5kZWxldGUoKVxyXG4gICAgICAuZXEoXCJpZFwiLCBncm91cElkKTtcclxuICAgIGlmIChlcnJvcikge1xyXG4gICAgICBhZGRUb2FzdCh7IHR5cGU6IFwiZXJyb3JcIiwgdGl0bGU6IFwiRXJyZXVyXCIsIGRlc2NyaXB0aW9uOiBlcnJvci5tZXNzYWdlIH0pO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gQWxzbyBuZWVkIHRvIHVuLWFzc2lnbiBmcm9tIG1hY2hpbmVzLiBUaGlzIGlzIGEgbm9uLWF0b21pYyBvcGVyYXRpb24gZm9yIHNpbXBsaWNpdHkuXHJcbiAgICAgIG1hY2hpbmVzLmZvckVhY2goYXN5bmMgKG0pID0+IHtcclxuICAgICAgICBpZiAobS5hc3NpZ25lZEZpbHRlcnMuc29tZSgoYWYpID0+IGFmLmZpbHRlckdyb3VwSWQgPT09IGdyb3VwSWQpKSB7XHJcbiAgICAgICAgICBjb25zdCBuZXdBc3NpZ25lZCA9IG0uYXNzaWduZWRGaWx0ZXJzLm1hcCgoYWYpID0+XHJcbiAgICAgICAgICAgIGFmLmZpbHRlckdyb3VwSWQgPT09IGdyb3VwSWQgPyB7IC4uLmFmLCBmaWx0ZXJHcm91cElkOiBudWxsIH0gOiBhZlxyXG4gICAgICAgICAgKTtcclxuICAgICAgICAgIGF3YWl0IHN1cGFiYXNlXHJcbiAgICAgICAgICAgIC5mcm9tKFwibWFjaGluZXNcIilcclxuICAgICAgICAgICAgLnVwZGF0ZSh7IGFzc2lnbmVkX2ZpbHRlcnM6IG5ld0Fzc2lnbmVkIGFzIGFueSB9KVxyXG4gICAgICAgICAgICAuZXEoXCJpZFwiLCBtLmlkKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgICBmZXRjaERhdGEoKTtcclxuICAgICAgYWRkVG9hc3QoeyB0eXBlOiBcImluZm9cIiwgdGl0bGU6IFwiR3JvdXBlIFN1cHByaW3DqVwiIH0pO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIGNvbnN0IG9wZW5NYWludGVuYW5jZU1vZGFsID0gKFxyXG4gICAgcmVjb3JkOiBQYXJ0aWFsPE1haW50ZW5hbmNlUmVjb3JkPiB8IG51bGwsXHJcbiAgICB2aWV3T25seTogYm9vbGVhbiA9IGZhbHNlXHJcbiAgKSA9PiB7XHJcbiAgICBzZXRFZGl0aW5nTWFpbnRlbmFuY2VSZWNvcmQocmVjb3JkKTtcclxuICAgIHNldElzTWFpbnRlbmFuY2VWaWV3T25seSh2aWV3T25seSk7XHJcbiAgICBzZXRJc01haW50ZW5hbmNlTW9kYWxPcGVuKHRydWUpO1xyXG4gIH07XHJcbiAgY29uc3QgY2xvc2VNYWludGVuYW5jZU1vZGFsID0gKCkgPT4gc2V0SXNNYWludGVuYW5jZU1vZGFsT3BlbihmYWxzZSk7XHJcblxyXG4gIGNvbnN0IHNhdmVNYWludGVuYW5jZVJlY29yZCA9IGFzeW5jIChcclxuICAgIHJlY29yZERhdGE6IE1haW50ZW5hbmNlUmVjb3JkIHwgT21pdDxNYWludGVuYW5jZVJlY29yZCwgXCJpZFwiPlxyXG4gICkgPT4ge1xyXG4gICAgY29uc3QgcmVjb3JkVG9TYXZlID1cclxuICAgICAgXCJpZFwiIGluIHJlY29yZERhdGEgJiYgcmVjb3JkRGF0YS5pZFxyXG4gICAgICAgID8ge1xyXG4gICAgICAgICAgICBpZDogcmVjb3JkRGF0YS5pZCxcclxuICAgICAgICAgICAgbWFjaGluZV9pZDogcmVjb3JkRGF0YS5tYWNoaW5lSWQsXHJcbiAgICAgICAgICAgIGRhdGU6IHJlY29yZERhdGEuZGF0ZSxcclxuICAgICAgICAgICAgc2VydmljZV9ob3VyczogcmVjb3JkRGF0YS5zZXJ2aWNlSG91cnMsXHJcbiAgICAgICAgICAgIG1haW50ZW5hbmNlX3JhbmdlOiByZWNvcmREYXRhLm1haW50ZW5hbmNlUmFuZ2UsXHJcbiAgICAgICAgICAgIGZpbHRlcnNfdXNlZDogcmVjb3JkRGF0YS5maWx0ZXJzVXNlZCxcclxuICAgICAgICAgIH1cclxuICAgICAgICA6IHtcclxuICAgICAgICAgICAgaWQ6IGBtYWludC0ke0RhdGUubm93KCl9YCxcclxuICAgICAgICAgICAgbWFjaGluZV9pZDogcmVjb3JkRGF0YS5tYWNoaW5lSWQsXHJcbiAgICAgICAgICAgIGRhdGU6IHJlY29yZERhdGEuZGF0ZSxcclxuICAgICAgICAgICAgc2VydmljZV9ob3VyczogcmVjb3JkRGF0YS5zZXJ2aWNlSG91cnMsXHJcbiAgICAgICAgICAgIG1haW50ZW5hbmNlX3JhbmdlOiByZWNvcmREYXRhLm1haW50ZW5hbmNlUmFuZ2UsXHJcbiAgICAgICAgICAgIGZpbHRlcnNfdXNlZDogcmVjb3JkRGF0YS5maWx0ZXJzVXNlZCxcclxuICAgICAgICAgIH07XHJcbiAgICBjb25zdCB7IGVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZVxyXG4gICAgICAuZnJvbShcIm1haW50ZW5hbmNlX3JlY29yZHNcIilcclxuICAgICAgLnVwc2VydChyZWNvcmRUb1NhdmUgYXMgYW55KTtcclxuXHJcbiAgICBpZiAoZXJyb3IpIHtcclxuICAgICAgYWRkVG9hc3QoeyB0eXBlOiBcImVycm9yXCIsIHRpdGxlOiBcIkVycmV1clwiLCBkZXNjcmlwdGlvbjogZXJyb3IubWVzc2FnZSB9KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGNvbnN0IG1hY2hpbmUgPSBtYWNoaW5lcy5maW5kKChtKSA9PiBtLmlkID09PSByZWNvcmREYXRhLm1hY2hpbmVJZCk7XHJcbiAgICAgIGlmIChtYWNoaW5lICYmIHJlY29yZERhdGEuc2VydmljZUhvdXJzID4gbWFjaGluZS5zZXJ2aWNlSG91cnMpIHtcclxuICAgICAgICBhd2FpdCBzdXBhYmFzZVxyXG4gICAgICAgICAgLmZyb20oXCJtYWNoaW5lc1wiKVxyXG4gICAgICAgICAgLnVwZGF0ZSh7IHNlcnZpY2VfaG91cnM6IHJlY29yZERhdGEuc2VydmljZUhvdXJzIH0pXHJcbiAgICAgICAgICAuZXEoXCJpZFwiLCBtYWNoaW5lLmlkKTtcclxuICAgICAgfVxyXG4gICAgICBmZXRjaERhdGEoKTtcclxuICAgICAgY29uc3Qgc3VjY2Vzc01lc3NhZ2UgPVxyXG4gICAgICAgIFwiaWRcIiBpbiByZWNvcmREYXRhICYmIHJlY29yZERhdGEuaWRcclxuICAgICAgICAgID8gXCJNYWludGVuYW5jZSBNaXNlIMOgIEpvdXJcIlxyXG4gICAgICAgICAgOiBcIk1haW50ZW5hbmNlIEVucmVnaXN0csOpZVwiO1xyXG4gICAgICBhZGRUb2FzdCh7IHR5cGU6IFwic3VjY2Vzc1wiLCB0aXRsZTogc3VjY2Vzc01lc3NhZ2UgfSk7XHJcbiAgICB9XHJcbiAgICBjbG9zZU1haW50ZW5hbmNlTW9kYWwoKTtcclxuICB9O1xyXG5cclxuICBjb25zdCBkZWxldGVNYWludGVuYW5jZVJlY29yZCA9IGFzeW5jIChyZWNvcmRJZDogc3RyaW5nKSA9PiB7XHJcbiAgICBjb25zdCB7IGVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZVxyXG4gICAgICAuZnJvbShcIm1haW50ZW5hbmNlX3JlY29yZHNcIilcclxuICAgICAgLmRlbGV0ZSgpXHJcbiAgICAgIC5lcShcImlkXCIsIHJlY29yZElkKTtcclxuICAgIGlmIChlcnJvcikge1xyXG4gICAgICBhZGRUb2FzdCh7IHR5cGU6IFwiZXJyb3JcIiwgdGl0bGU6IFwiRXJyZXVyXCIsIGRlc2NyaXB0aW9uOiBlcnJvci5tZXNzYWdlIH0pO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgZmV0Y2hEYXRhKCk7XHJcbiAgICAgIGFkZFRvYXN0KHsgdHlwZTogXCJpbmZvXCIsIHRpdGxlOiBcIkVucmVnaXN0cmVtZW50IFN1cHByaW3DqVwiIH0pO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIGNvbnN0IGhhbmRsZU5vdGlmaWNhdGlvbkNsaWNrID0gKG5vdGlmaWNhdGlvbjogTm90aWZpY2F0aW9uKSA9PiB7XHJcbiAgICBzZXROb3RpZmljYXRpb25zKChwcmV2KSA9PlxyXG4gICAgICBwcmV2Lm1hcCgobikgPT4gKG4uaWQgPT09IG5vdGlmaWNhdGlvbi5pZCA/IHsgLi4ubiwgcmVhZDogdHJ1ZSB9IDogbikpXHJcbiAgICApO1xyXG4gICAgaWYgKG5vdGlmaWNhdGlvbi50eXBlID09PSBcIm1haW50ZW5hbmNlXCIpIHtcclxuICAgICAgc2VsZWN0TWFjaGluZShub3RpZmljYXRpb24uZW50aXR5SWQpO1xyXG4gICAgfSBlbHNlIGlmIChub3RpZmljYXRpb24udHlwZSA9PT0gXCJzdG9ja1wiKSB7XHJcbiAgICAgIG5hdmlnYXRlVG9GaWx0ZXJHcm91cChub3RpZmljYXRpb24uZW50aXR5SWQpO1xyXG4gICAgfVxyXG4gIH07XHJcbiAgY29uc3QgbWFya0FsbE5vdGlmaWNhdGlvbnNBc1JlYWQgPSAoKSA9PiB7XHJcbiAgICBzZXROb3RpZmljYXRpb25zKChwcmV2KSA9PiBwcmV2Lm1hcCgobikgPT4gKHsgLi4ubiwgcmVhZDogdHJ1ZSB9KSkpO1xyXG4gIH07XHJcblxyXG4gIGNvbnN0IG9wZW5BZGRTdG9ja01vZGFsID0gKGluZm86IFN0b2NrVXBkYXRlSW5mbykgPT4ge1xyXG4gICAgc2V0U3RvY2tVcGRhdGVJbmZvKGluZm8pO1xyXG4gICAgc2V0SXNBZGRTdG9ja01vZGFsT3Blbih0cnVlKTtcclxuICB9O1xyXG4gIGNvbnN0IGNsb3NlQWRkU3RvY2tNb2RhbCA9ICgpID0+IHNldElzQWRkU3RvY2tNb2RhbE9wZW4oZmFsc2UpO1xyXG5cclxuICBjb25zdCBhZGRTdG9jayA9IGFzeW5jIChxdWFudGl0eTogbnVtYmVyKSA9PiB7XHJcbiAgICBpZiAoIXN0b2NrVXBkYXRlSW5mbykgcmV0dXJuO1xyXG4gICAgY29uc3QgeyBmaWx0ZXJSZWZlcmVuY2UsIGZpbHRlckdyb3VwSWQgfSA9IHN0b2NrVXBkYXRlSW5mbztcclxuXHJcbiAgICBjb25zdCBncm91cFRvVXBkYXRlID0gZmlsdGVyR3JvdXBzLmZpbmQoKGcpID0+IGcuaWQgPT09IGZpbHRlckdyb3VwSWQpO1xyXG4gICAgaWYgKCFncm91cFRvVXBkYXRlKSByZXR1cm47XHJcblxyXG4gICAgY29uc3QgbmV3UmVmZXJlbmNlcyA9IGdyb3VwVG9VcGRhdGUucmVmZXJlbmNlcy5tYXAoKHJlZikgPT5cclxuICAgICAgcmVmLmlkID09PSBmaWx0ZXJSZWZlcmVuY2UuaWRcclxuICAgICAgICA/IHsgLi4ucmVmLCBzdG9jazogcmVmLnN0b2NrICsgcXVhbnRpdHkgfVxyXG4gICAgICAgIDogcmVmXHJcbiAgICApO1xyXG5cclxuICAgIGNvbnN0IHsgZXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlXHJcbiAgICAgIC5mcm9tKFwiZmlsdGVyX2dyb3Vwc1wiKVxyXG4gICAgICAudXBkYXRlKHsgcmVmZXJlbmNlczogbmV3UmVmZXJlbmNlcyBhcyBhbnkgfSlcclxuICAgICAgLmVxKFwiaWRcIiwgZmlsdGVyR3JvdXBJZCk7XHJcblxyXG4gICAgaWYgKGVycm9yKSB7XHJcbiAgICAgIGFkZFRvYXN0KHsgdHlwZTogXCJlcnJvclwiLCB0aXRsZTogXCJFcnJldXJcIiwgZGVzY3JpcHRpb246IGVycm9yLm1lc3NhZ2UgfSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBmZXRjaERhdGEoKTtcclxuICAgICAgYWRkVG9hc3Qoe1xyXG4gICAgICAgIHR5cGU6IFwic3VjY2Vzc1wiLFxyXG4gICAgICAgIHRpdGxlOiBcIlN0b2NrIEFqb3V0w6lcIixcclxuICAgICAgICBkZXNjcmlwdGlvbjogYCR7cXVhbnRpdHl9IHVuaXTDqShzKSBham91dMOpZShzKSBwb3VyICR7ZmlsdGVyUmVmZXJlbmNlLnJlZmVyZW5jZX0uYCxcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBjbG9zZUFkZFN0b2NrTW9kYWwoKTtcclxuICB9O1xyXG5cclxuICBjb25zdCBzZXRUaGVtZSA9ICh0aGVtZUlkOiBUaGVtZSkgPT4ge1xyXG4gICAgX3NldFRoZW1lKHRoZW1lSWQpO1xyXG4gICAgaWYgKHRoZW1lSWQuc3RhcnRzV2l0aChcImN1c3RvbS1cIikpIHtcclxuICAgICAgY29uc3Qgc2F2ZWQgPSBzYXZlZFRoZW1lcy5maW5kKCh0KSA9PiB0LmlkID09PSB0aGVtZUlkKTtcclxuICAgICAgaWYgKHNhdmVkKSBzZXRDdXN0b21Db2xvcnMoc2F2ZWQuY29sb3JzKTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICBjb25zdCBvcGVuVGhlbWVDdXN0b21pemVyID0gKHRoZW1lVG9FZGl0OiBTYXZlZFRoZW1lIHwgbnVsbCkgPT4ge1xyXG4gICAgc2V0RWRpdGluZ0N1c3RvbVRoZW1lKHRoZW1lVG9FZGl0KTtcclxuICAgIHNldEN1c3RvbUNvbG9ycyh0aGVtZVRvRWRpdCA/IHRoZW1lVG9FZGl0LmNvbG9ycyA6IGRlZmF1bHRDdXN0b21Db2xvcnMpO1xyXG4gICAgc2V0SXNUaGVtZUN1c3RvbWl6ZXJPcGVuKHRydWUpO1xyXG4gIH07XHJcbiAgY29uc3QgY2xvc2VUaGVtZUN1c3RvbWl6ZXIgPSAoKSA9PiB7XHJcbiAgICBzZXRUaGVtZSh0aGVtZSk7XHJcbiAgICBzZXRJc1RoZW1lQ3VzdG9taXplck9wZW4oZmFsc2UpO1xyXG4gIH07XHJcblxyXG4gIGNvbnN0IHNhdmVDdXN0b21UaGVtZSA9IChcclxuICAgIHRoZW1lRGF0YTogT21pdDxTYXZlZFRoZW1lLCBcImlkXCI+ICYgeyBpZD86IHN0cmluZyB9XHJcbiAgKSA9PiB7XHJcbiAgICBpZiAodGhlbWVEYXRhLmlkKSB7XHJcbiAgICAgIGNvbnN0IHVwZGF0ZWRUaGVtZXMgPSBzYXZlZFRoZW1lcy5tYXAoKHQpID0+XHJcbiAgICAgICAgdC5pZCA9PT0gdGhlbWVEYXRhLmlkID8geyAuLi50LCAuLi50aGVtZURhdGEgfSA6IHRcclxuICAgICAgKTtcclxuICAgICAgc2V0U2F2ZWRUaGVtZXModXBkYXRlZFRoZW1lcyk7XHJcbiAgICAgIHNldFRoZW1lKHRoZW1lRGF0YS5pZCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBjb25zdCBuZXdUaGVtZTogU2F2ZWRUaGVtZSA9IHsgLi4udGhlbWVEYXRhLCBpZDogYGN1c3RvbS0ke0RhdGUubm93KCl9YCB9O1xyXG4gICAgICBzZXRTYXZlZFRoZW1lcyhbLi4uc2F2ZWRUaGVtZXMsIG5ld1RoZW1lXSk7XHJcbiAgICAgIHNldFRoZW1lKG5ld1RoZW1lLmlkKTtcclxuICAgIH1cclxuICAgIGFkZFRvYXN0KHtcclxuICAgICAgdHlwZTogXCJzdWNjZXNzXCIsXHJcbiAgICAgIHRpdGxlOiBcIlRow6htZSBFbnJlZ2lzdHLDqVwiLFxyXG4gICAgICBkZXNjcmlwdGlvbjogYExlIHRow6htZSBcIiR7dGhlbWVEYXRhLm5hbWV9XCIgYSDDqXTDqSBzYXV2ZWdhcmTDqS5gLFxyXG4gICAgfSk7XHJcbiAgfTtcclxuXHJcbiAgY29uc3QgZGVsZXRlQ3VzdG9tVGhlbWUgPSAodGhlbWVJZDogc3RyaW5nKSA9PiB7XHJcbiAgICBzZXRTYXZlZFRoZW1lcyhzYXZlZFRoZW1lcy5maWx0ZXIoKHQpID0+IHQuaWQgIT09IHRoZW1lSWQpKTtcclxuICAgIGlmICh0aGVtZSA9PT0gdGhlbWVJZCkge1xyXG4gICAgICBzZXRUaGVtZShcImRlZmF1bHQtbGlnaHRcIik7XHJcbiAgICB9XHJcbiAgICBhZGRUb2FzdCh7IHR5cGU6IFwiaW5mb1wiLCB0aXRsZTogXCJUaMOobWUgU3VwcHJpbcOpXCIgfSk7XHJcbiAgfTtcclxuXHJcbiAgY29uc3QgYWN0aW9ucyA9IHtcclxuICAgIHNldEN1cnJlbnRWaWV3LFxyXG4gICAgdG9nZ2xlU2lkZWJhcixcclxuICAgIGNsb3NlU2lkZWJhcixcclxuICAgIHNlbGVjdE1hY2hpbmUsXHJcbiAgICBhc3NpZ25GaWx0ZXJUb01hY2hpbmUsXHJcbiAgICBhZGRGaWx0ZXJUeXBlVG9NYWNoaW5lLFxyXG4gICAgcmVtb3ZlRmlsdGVyVHlwZUZyb21NYWNoaW5lLFxyXG4gICAgb3BlbkNvbmZpcm1hdGlvbkRpYWxvZyxcclxuICAgIGNsb3NlQ29uZmlybWF0aW9uRGlhbG9nLFxyXG4gICAgaGFuZGxlQ29uZmlybSxcclxuICAgIG9wZW5NYWNoaW5lTW9kYWwsXHJcbiAgICBjbG9zZU1hY2hpbmVNb2RhbCxcclxuICAgIHNhdmVNYWNoaW5lLFxyXG4gICAgZGVsZXRlTWFjaGluZSxcclxuICAgIG9wZW5GaWx0ZXJHcm91cE1vZGFsLFxyXG4gICAgY2xvc2VGaWx0ZXJHcm91cE1vZGFsLFxyXG4gICAgc2F2ZUZpbHRlckdyb3VwLFxyXG4gICAgZGVsZXRlRmlsdGVyR3JvdXAsXHJcbiAgICBvcGVuTWFpbnRlbmFuY2VNb2RhbCxcclxuICAgIGNsb3NlTWFpbnRlbmFuY2VNb2RhbCxcclxuICAgIHNhdmVNYWludGVuYW5jZVJlY29yZCxcclxuICAgIGRlbGV0ZU1haW50ZW5hbmNlUmVjb3JkLFxyXG4gICAgbmF2aWdhdGVUb0ZpbHRlckdyb3VwLFxyXG4gICAgY2xlYXJIaWdobGlnaHRlZEZpbHRlckdyb3VwOiAoKSA9PiBzZXRIaWdobGlnaHRlZEZpbHRlckdyb3VwSWQobnVsbCksXHJcbiAgICBoYW5kbGVOb3RpZmljYXRpb25DbGljayxcclxuICAgIG1hcmtBbGxOb3RpZmljYXRpb25zQXNSZWFkLFxyXG4gICAgb3BlbkFJQXNzaXN0YW50OiAoKSA9PiBzZXRJc0FJQXNzaXN0YW50T3Blbih0cnVlKSxcclxuICAgIGNsb3NlQUlBc3Npc3RhbnQ6ICgpID0+IHNldElzQUlBc3Npc3RhbnRPcGVuKGZhbHNlKSxcclxuICAgIG9wZW5TY2FubmVyOiAoKSA9PiBzZXRJc1NjYW5uZXJPcGVuKHRydWUpLFxyXG4gICAgY2xvc2VTY2FubmVyOiAoKSA9PiBzZXRJc1NjYW5uZXJPcGVuKGZhbHNlKSxcclxuICAgIGFkZFRvYXN0LFxyXG4gICAgcmVtb3ZlVG9hc3QsXHJcbiAgICBvcGVuQWRkU3RvY2tNb2RhbCxcclxuICAgIGNsb3NlQWRkU3RvY2tNb2RhbCxcclxuICAgIGFkZFN0b2NrLFxyXG4gICAgc2V0VGhlbWUsXHJcbiAgICBvcGVuVGhlbWVDdXN0b21pemVyLFxyXG4gICAgY2xvc2VUaGVtZUN1c3RvbWl6ZXIsXHJcbiAgICBzYXZlQ3VzdG9tVGhlbWUsXHJcbiAgICBkZWxldGVDdXN0b21UaGVtZSxcclxuICAgIG9wZW5JbXBvcnRNb2RhbDogKCkgPT4gc2V0SXNJbXBvcnRNb2RhbE9wZW4odHJ1ZSksXHJcbiAgICBjbG9zZUltcG9ydE1vZGFsLFxyXG4gICAgaW1wb3J0TWFjaGluZXMsXHJcbiAgICBpbXBvcnRNYWludGVuYW5jZVJlY29yZHMsXHJcbiAgfTtcclxuXHJcbiAgY29uc3Qgc3RhdGUgPSB7XHJcbiAgICBpc0xvYWRpbmcsXHJcbiAgICBjdXJyZW50VmlldyxcclxuICAgIG1hY2hpbmVzLFxyXG4gICAgZmlsdGVyR3JvdXBzLFxyXG4gICAgZmlsdGVyVHlwZXMsXHJcbiAgICBzZWxlY3RlZE1hY2hpbmUsXHJcbiAgICBtYWludGVuYW5jZVJlY29yZHMsXHJcbiAgICB0aGVtZSxcclxuICAgIGN1c3RvbUNvbG9ycyxcclxuICAgIHNhdmVkVGhlbWVzLFxyXG4gICAgaGlnaGxpZ2h0ZWRGaWx0ZXJHcm91cElkLFxyXG4gICAgaXNTaWRlYmFyT3BlbixcclxuICAgIG5vdGlmaWNhdGlvbnMsXHJcbiAgICB0b2FzdHMsXHJcbiAgICBpc1NjYW5uZXJPcGVuLFxyXG4gICAgaXNBSUFzc2lzdGFudE9wZW4sXHJcbiAgICBpc01hY2hpbmVNb2RhbE9wZW4sXHJcbiAgICBlZGl0aW5nTWFjaGluZSxcclxuICAgIGlzRmlsdGVyR3JvdXBNb2RhbE9wZW4sXHJcbiAgICBlZGl0aW5nRmlsdGVyR3JvdXAsXHJcbiAgICBpc01haW50ZW5hbmNlTW9kYWxPcGVuLFxyXG4gICAgZWRpdGluZ01haW50ZW5hbmNlUmVjb3JkLFxyXG4gICAgaXNNYWludGVuYW5jZVZpZXdPbmx5LFxyXG4gICAgaXNBZGRTdG9ja01vZGFsT3BlbixcclxuICAgIHN0b2NrVXBkYXRlSW5mbyxcclxuICAgIGlzVGhlbWVDdXN0b21pemVyT3BlbixcclxuICAgIGVkaXRpbmdDdXN0b21UaGVtZSxcclxuICAgIGlzSW1wb3J0TW9kYWxPcGVuLFxyXG4gICAgY29uZmlybWF0aW9uRGlhbG9nQ29uZmlnLFxyXG4gIH07XHJcblxyXG4gIHJldHVybiB7IHN0YXRlLCBhY3Rpb25zIH07XHJcbn07XHJcbiJdLCJuYW1lcyI6WyJ1c2VTdGF0ZSIsInVzZUVmZmVjdCIsInVzZUNhbGxiYWNrIiwiVmlldyIsImNhbGN1bGF0ZU5leHRNYWludGVuYW5jZSIsInN1cGFiYXNlIiwibG9hZEZyb21TdG9yYWdlIiwia2V5IiwiZGVmYXVsdFZhbHVlIiwibG9jYWxTdG9yYWdlIiwic3RvcmVkVmFsdWUiLCJnZXRJdGVtIiwiSlNPTiIsInBhcnNlIiwiZSIsInN0YXJ0c1dpdGgiLCJjb25zb2xlIiwid2FybiIsImVycm9yIiwiZGVmYXVsdEN1c3RvbUNvbG9ycyIsImJhY2tncm91bmQiLCJmb3JlZ3JvdW5kIiwiZm9yZWdyb3VuZFNlY29uZGFyeSIsImNhcmQiLCJjYXJkRm9yZWdyb3VuZCIsInByaW1hcnkiLCJwcmltYXJ5Rm9yZWdyb3VuZCIsImFjY2VudCIsImRlc3RydWN0aXZlIiwiZGVzdHJ1Y3RpdmVGb3JlZ3JvdW5kIiwiYm9yZGVyIiwiaW5wdXQiLCJyaW5nIiwiY2FyZEJvcmRlcnMiLCJ1c2VBcHBMb2dpYyIsImlzTG9hZGluZyIsInNldElzTG9hZGluZyIsImN1cnJlbnRWaWV3Iiwic2V0Q3VycmVudFZpZXciLCJEQVNIQk9BUkQiLCJtYWNoaW5lcyIsInNldE1hY2hpbmVzIiwiZmlsdGVyR3JvdXBzIiwic2V0RmlsdGVyR3JvdXBzIiwiZmlsdGVyVHlwZXMiLCJzZXRGaWx0ZXJUeXBlcyIsInNlbGVjdGVkTWFjaGluZSIsInNldFNlbGVjdGVkTWFjaGluZSIsIm1haW50ZW5hbmNlUmVjb3JkcyIsInNldE1haW50ZW5hbmNlUmVjb3JkcyIsInRoZW1lIiwiX3NldFRoZW1lIiwic2F2ZWRUaGVtZXMiLCJzZXRTYXZlZFRoZW1lcyIsImN1c3RvbUNvbG9ycyIsInNldEN1c3RvbUNvbG9ycyIsInNhdmVkIiwiaGlnaGxpZ2h0ZWRGaWx0ZXJHcm91cElkIiwic2V0SGlnaGxpZ2h0ZWRGaWx0ZXJHcm91cElkIiwiaXNTaWRlYmFyT3BlbiIsInNldElzU2lkZWJhck9wZW4iLCJub3RpZmljYXRpb25zIiwic2V0Tm90aWZpY2F0aW9ucyIsInRvYXN0cyIsInNldFRvYXN0cyIsImlzU2Nhbm5lck9wZW4iLCJzZXRJc1NjYW5uZXJPcGVuIiwiaXNBSUFzc2lzdGFudE9wZW4iLCJzZXRJc0FJQXNzaXN0YW50T3BlbiIsImlzTWFjaGluZU1vZGFsT3BlbiIsInNldElzTWFjaGluZU1vZGFsT3BlbiIsImVkaXRpbmdNYWNoaW5lIiwic2V0RWRpdGluZ01hY2hpbmUiLCJpc0ZpbHRlckdyb3VwTW9kYWxPcGVuIiwic2V0SXNGaWx0ZXJHcm91cE1vZGFsT3BlbiIsImVkaXRpbmdGaWx0ZXJHcm91cCIsInNldEVkaXRpbmdGaWx0ZXJHcm91cCIsImlzTWFpbnRlbmFuY2VNb2RhbE9wZW4iLCJzZXRJc01haW50ZW5hbmNlTW9kYWxPcGVuIiwiZWRpdGluZ01haW50ZW5hbmNlUmVjb3JkIiwic2V0RWRpdGluZ01haW50ZW5hbmNlUmVjb3JkIiwiaXNNYWludGVuYW5jZVZpZXdPbmx5Iiwic2V0SXNNYWludGVuYW5jZVZpZXdPbmx5IiwiaXNBZGRTdG9ja01vZGFsT3BlbiIsInNldElzQWRkU3RvY2tNb2RhbE9wZW4iLCJzdG9ja1VwZGF0ZUluZm8iLCJzZXRTdG9ja1VwZGF0ZUluZm8iLCJpc1RoZW1lQ3VzdG9taXplck9wZW4iLCJzZXRJc1RoZW1lQ3VzdG9taXplck9wZW4iLCJlZGl0aW5nQ3VzdG9tVGhlbWUiLCJzZXRFZGl0aW5nQ3VzdG9tVGhlbWUiLCJpc0ltcG9ydE1vZGFsT3BlbiIsInNldElzSW1wb3J0TW9kYWxPcGVuIiwiY29uZmlybWF0aW9uRGlhbG9nQ29uZmlnIiwic2V0Q29uZmlybWF0aW9uRGlhbG9nQ29uZmlnIiwiaXNPcGVuIiwidGl0bGUiLCJkZXNjcmlwdGlvbiIsIm9uQ29uZmlybSIsImFkZFRvYXN0IiwidG9hc3QiLCJpZCIsIkRhdGUiLCJub3ciLCJwcmV2IiwiZmV0Y2hEYXRhIiwibWFjaGluZXNSZXMiLCJmaWx0ZXJHcm91cHNSZXMiLCJmaWx0ZXJUeXBlc1JlcyIsIm1haW50ZW5hbmNlUmVjb3Jkc1JlcyIsIlByb21pc2UiLCJhbGwiLCJmcm9tIiwic2VsZWN0IiwidHJhbnNmb3JtZWRNYWNoaW5lcyIsImRhdGEiLCJtYXAiLCJtYWNoaW5lIiwiY29kZSIsImRlc2lnbmF0aW9uIiwibWFycXVlIiwidHlwZSIsInNlcmlhbE51bWJlciIsInNlcmlhbF9udW1iZXIiLCJyZWdpc3RyYXRpb25OdW1iZXIiLCJyZWdpc3RyYXRpb25fbnVtYmVyIiwic2VydmljZUhvdXJzIiwic2VydmljZV9ob3VycyIsImFzc2lnbmVkRmlsdGVycyIsImFzc2lnbmVkX2ZpbHRlcnMiLCJ0cmFuc2Zvcm1lZEZpbHRlckdyb3VwcyIsImdyb3VwIiwibmFtZSIsImZpbHRlclR5cGUiLCJmaWx0ZXJfdHlwZSIsIm9yaWdpbmFsUmVmZXJlbmNlSWQiLCJvcmlnaW5hbF9yZWZlcmVuY2VfaWQiLCJyZWZlcmVuY2VzIiwidHJhbnNmb3JtZWRNYWludGVuYW5jZVJlY29yZHMiLCJyZWNvcmQiLCJtYWNoaW5lSWQiLCJtYWNoaW5lX2lkIiwibWFpbnRlbmFuY2VSYW5nZSIsIm1haW50ZW5hbmNlX3JhbmdlIiwiZGF0ZSIsImZpbHRlcnNVc2VkIiwiZmlsdGVyc191c2VkIiwibWVzc2FnZSIsInNldEl0ZW0iLCJzdHJpbmdpZnkiLCJyZW1vdmVUb2FzdCIsImZpbHRlciIsInQiLCJuYXZpZ2F0ZVRvRmlsdGVyR3JvdXAiLCJncm91cElkIiwiRklMVEVSX01BTkFHRU1FTlQiLCJ0b0lTT1N0cmluZyIsImN1cnJlbnRWYWxpZEFsZXJ0cyIsImhpc3RvcnlCeU1hY2hpbmUiLCJNYXAiLCJmb3JFYWNoIiwicmVjIiwiaGFzIiwic2V0IiwiZ2V0IiwicHVzaCIsImhpc3RvcnkiLCJuZXh0TWFpbnQiLCJkdWVJbiIsImhvdXJzIiwiZ2FtbWUiLCJlbnRpdHlJZCIsInJlZiIsInN0b2NrIiwicmVmZXJlbmNlIiwibWFudWZhY3R1cmVyIiwicHJldk5vdGlmaWNhdGlvbnMiLCJwcmV2TWFwIiwibiIsIm5leHROb3RpZmljYXRpb25zIiwiYWxlcnQiLCJyZWFkIiwiY3JlYXRlZEF0IiwidG9nZ2xlU2lkZWJhciIsImNsb3NlU2lkZWJhciIsInNlbGVjdE1hY2hpbmUiLCJmaW5kIiwibSIsIk1BQ0hJTkVfREVUQUlMIiwiYXNzaWduRmlsdGVyVG9NYWNoaW5lIiwiZmlsdGVyVHlwZUlkIiwiZmlsdGVyR3JvdXBJZCIsIm1hY2hpbmVUb1VwZGF0ZSIsIm5ld0Fzc2lnbmVkRmlsdGVycyIsImV4aXN0aW5nSW5kZXgiLCJmaW5kSW5kZXgiLCJhZiIsInVwZGF0ZSIsImVxIiwidXBkYXRlZE1hY2hpbmUiLCJhZGRGaWx0ZXJUeXBlVG9NYWNoaW5lIiwic29tZSIsInJlbW92ZUZpbHRlclR5cGVGcm9tTWFjaGluZSIsIm9wZW5Db25maXJtYXRpb25EaWFsb2ciLCJjb25maWciLCJjbG9zZUNvbmZpcm1hdGlvbkRpYWxvZyIsImhhbmRsZUNvbmZpcm0iLCJvcGVuTWFjaGluZU1vZGFsIiwiY2xvc2VNYWNoaW5lTW9kYWwiLCJzYXZlTWFjaGluZSIsIm1hY2hpbmVEYXRhIiwibWFjaGluZVRvU2F2ZSIsInVwc2VydCIsInN1Y2Nlc3NNZXNzYWdlIiwidHJhbnNmb3JtZWRNYWNoaW5lIiwiZGVsZXRlTWFjaGluZSIsImRlbGV0ZSIsImNsb3NlSW1wb3J0TW9kYWwiLCJpbXBvcnRNYWNoaW5lcyIsIm5ld01hY2hpbmVzRGF0YSIsIm1hY2hpbmVzVG9BZGQiLCJubSIsIk1hdGgiLCJyYW5kb20iLCJ0b1N0cmluZyIsInN1YnN0ciIsInZhbGlkTWFjaGluZXNUb0FkZCIsImxlbmd0aCIsImluc2VydCIsImltcG9ydE1haW50ZW5hbmNlUmVjb3JkcyIsIm5ld01haW50ZW5hbmNlRGF0YSIsIm1hY2hpbmVzRGF0YSIsIm1hY2hpbmVzRXJyb3IiLCJtYWNoaW5lQ29kZVRvSWRNYXAiLCJtYWNoaW5lRGVzaWduYXRpb25Ub0lkTWFwIiwidG9Mb3dlckNhc2UiLCJ1bm1hdGNoZWRSZWNvcmRzQ291bnQiLCJ1bm1hdGNoZWRSZWNvcmRzIiwibWFpbnRlbmFuY2VSZWNvcmRzVG9BZGQiLCJ1bmRlZmluZWQiLCJtYWNoaW5lRGVzaWduYXRpb24iLCJlbnRyaWVzIiwiaW5jbHVkZXMiLCJiYXNlUmVjb3JkIiwibG9nIiwib3BlbkZpbHRlckdyb3VwTW9kYWwiLCJjbG9zZUZpbHRlckdyb3VwTW9kYWwiLCJzYXZlRmlsdGVyR3JvdXAiLCJncm91cERhdGEiLCJncm91cFRvU2F2ZSIsImRlbGV0ZUZpbHRlckdyb3VwIiwibmV3QXNzaWduZWQiLCJvcGVuTWFpbnRlbmFuY2VNb2RhbCIsInZpZXdPbmx5IiwiY2xvc2VNYWludGVuYW5jZU1vZGFsIiwic2F2ZU1haW50ZW5hbmNlUmVjb3JkIiwicmVjb3JkRGF0YSIsInJlY29yZFRvU2F2ZSIsImRlbGV0ZU1haW50ZW5hbmNlUmVjb3JkIiwicmVjb3JkSWQiLCJoYW5kbGVOb3RpZmljYXRpb25DbGljayIsIm5vdGlmaWNhdGlvbiIsIm1hcmtBbGxOb3RpZmljYXRpb25zQXNSZWFkIiwib3BlbkFkZFN0b2NrTW9kYWwiLCJpbmZvIiwiY2xvc2VBZGRTdG9ja01vZGFsIiwiYWRkU3RvY2siLCJxdWFudGl0eSIsImZpbHRlclJlZmVyZW5jZSIsImdyb3VwVG9VcGRhdGUiLCJnIiwibmV3UmVmZXJlbmNlcyIsInNldFRoZW1lIiwidGhlbWVJZCIsImNvbG9ycyIsIm9wZW5UaGVtZUN1c3RvbWl6ZXIiLCJ0aGVtZVRvRWRpdCIsImNsb3NlVGhlbWVDdXN0b21pemVyIiwic2F2ZUN1c3RvbVRoZW1lIiwidGhlbWVEYXRhIiwidXBkYXRlZFRoZW1lcyIsIm5ld1RoZW1lIiwiZGVsZXRlQ3VzdG9tVGhlbWUiLCJhY3Rpb25zIiwiY2xlYXJIaWdobGlnaHRlZEZpbHRlckdyb3VwIiwib3BlbkFJQXNzaXN0YW50IiwiY2xvc2VBSUFzc2lzdGFudCIsIm9wZW5TY2FubmVyIiwiY2xvc2VTY2FubmVyIiwib3BlbkltcG9ydE1vZGFsIiwic3RhdGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./hooks/useAppLogic.ts\n"));

/***/ })

});