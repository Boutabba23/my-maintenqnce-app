"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./hooks/useAppLogic.ts":
/*!******************************!*\
  !*** ./hooks/useAppLogic.ts ***!
  \******************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   defaultCustomColors: function() { return /* binding */ defaultCustomColors; },\n/* harmony export */   useAppLogic: function() { return /* binding */ useAppLogic; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../types */ \"(app-pages-browser)/./types.ts\");\n/* harmony import */ var _utils_maintenance__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/maintenance */ \"(app-pages-browser)/./utils/maintenance.ts\");\n/* harmony import */ var _utils_supabase__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/supabase */ \"(app-pages-browser)/./utils/supabase.ts\");\n/* __next_internal_client_entry_do_not_use__ defaultCustomColors,useAppLogic auto */ \n\n\n\nconst loadFromStorage = (key, defaultValue)=>{\n    try {\n        // Check if we're in a browser environment\n        if ( false || typeof localStorage === \"undefined\") {\n            return defaultValue;\n        }\n        const storedValue = localStorage.getItem(key);\n        if (storedValue) {\n            try {\n                return JSON.parse(storedValue);\n            } catch (e) {\n                if (key === \"gestifiltres-theme\" && !storedValue.startsWith('\"')) {\n                    console.warn(\"Old theme format detected, migrating.\");\n                    return storedValue;\n                }\n                throw e;\n            }\n        }\n    } catch (error) {\n        console.error('Error processing localStorage key \"'.concat(key, '\":'), error);\n    }\n    return defaultValue;\n};\nconst defaultCustomColors = {\n    background: \"#f8fafc\",\n    foreground: \"#0f172a\",\n    foregroundSecondary: \"#64748b\",\n    card: \"#ffffff\",\n    cardForeground: \"#0f172a\",\n    primary: \"#f97316\",\n    primaryForeground: \"#f8fafc\",\n    accent: \"#f1f5f9\",\n    destructive: \"#ef4444\",\n    destructiveForeground: \"#f8fafc\",\n    border: \"#e2e8f0\",\n    input: \"#f1f5f9\",\n    ring: \"#f97316\",\n    cardBorders: [\n        \"#3b82f6\",\n        \"#10b981\",\n        \"#f59e0b\",\n        \"#ef4444\",\n        \"#8b5cf6\",\n        \"#0ea5e9\"\n    ]\n};\nconst useAppLogic = ()=>{\n    const [isLoading, setIsLoading] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(true);\n    const [currentView, setCurrentView] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(_types__WEBPACK_IMPORTED_MODULE_1__.View.DASHBOARD);\n    const [machines, setMachines] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);\n    const [filterGroups, setFilterGroups] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);\n    const [filterTypes, setFilterTypes] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);\n    const [selectedMachine, setSelectedMachine] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [maintenanceRecords, setMaintenanceRecords] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);\n    const [theme, _setTheme] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(()=>loadFromStorage(\"gestifiltres-theme\", \"default-light\"));\n    const [savedThemes, setSavedThemes] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(()=>loadFromStorage(\"gestifiltres-savedThemes\", []));\n    const [customColors, setCustomColors] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(()=>{\n        const saved = loadFromStorage(\"gestifiltres-customColors\", defaultCustomColors);\n        return {\n            ...defaultCustomColors,\n            ...saved\n        };\n    });\n    const [highlightedFilterGroupId, setHighlightedFilterGroupId] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [isSidebarOpen, setIsSidebarOpen] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [notifications, setNotifications] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);\n    const [toasts, setToasts] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);\n    const [isScannerOpen, setIsScannerOpen] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [isAIAssistantOpen, setIsAIAssistantOpen] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [isMachineModalOpen, setIsMachineModalOpen] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [editingMachine, setEditingMachine] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [isFilterGroupModalOpen, setIsFilterGroupModalOpen] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [editingFilterGroup, setEditingFilterGroup] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [isMaintenanceModalOpen, setIsMaintenanceModalOpen] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [editingMaintenanceRecord, setEditingMaintenanceRecord] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [isMaintenanceViewOnly, setIsMaintenanceViewOnly] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [isAddStockModalOpen, setIsAddStockModalOpen] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [stockUpdateInfo, setStockUpdateInfo] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [isThemeCustomizerOpen, setIsThemeCustomizerOpen] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [editingCustomTheme, setEditingCustomTheme] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [isImportModalOpen, setIsImportModalOpen] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [confirmationDialogConfig, setConfirmationDialogConfig] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)({\n        isOpen: false,\n        title: \"\",\n        description: \"\",\n        onConfirm: ()=>{}\n    });\n    const addToast = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((toast)=>{\n        const id = \"toast-\".concat(Date.now());\n        setToasts((prev)=>[\n                ...prev,\n                {\n                    id,\n                    ...toast\n                }\n            ]);\n    }, []);\n    const fetchData = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async ()=>{\n        try {\n            const [machinesRes, filterGroupsRes, filterTypesRes, maintenanceRecordsRes] = await Promise.all([\n                _utils_supabase__WEBPACK_IMPORTED_MODULE_3__.supabase.from(\"machines\").select(\"*\"),\n                _utils_supabase__WEBPACK_IMPORTED_MODULE_3__.supabase.from(\"filter_groups\").select(\"*\"),\n                _utils_supabase__WEBPACK_IMPORTED_MODULE_3__.supabase.from(\"filter_types\").select(\"*\"),\n                _utils_supabase__WEBPACK_IMPORTED_MODULE_3__.supabase.from(\"maintenance_records\").select(\"*\")\n            ]);\n            if (machinesRes.error) throw machinesRes.error;\n            if (filterGroupsRes.error) throw filterGroupsRes.error;\n            if (filterTypesRes.error) throw filterTypesRes.error;\n            if (maintenanceRecordsRes.error) throw maintenanceRecordsRes.error;\n            // Transform database results to match application types\n            const transformedMachines = (machinesRes.data || []).map((machine)=>({\n                    id: machine.id,\n                    code: machine.code,\n                    designation: machine.designation,\n                    marque: machine.marque,\n                    type: machine.type,\n                    serialNumber: machine.serial_number || \"\",\n                    registrationNumber: machine.registration_number || \"\",\n                    serviceHours: machine.service_hours,\n                    assignedFilters: machine.assigned_filters || []\n                }));\n            const transformedFilterGroups = (filterGroupsRes.data || []).map((group)=>({\n                    id: group.id,\n                    name: group.name,\n                    filterType: group.filter_type || \"\",\n                    originalReferenceId: group.original_reference_id,\n                    references: group[\"references\"] || []\n                }));\n            const transformedMaintenanceRecords = (maintenanceRecordsRes.data || []).map((record)=>({\n                    id: record.id,\n                    machineId: record.machine_id,\n                    maintenanceRange: record.maintenance_range,\n                    serviceHours: record.service_hours,\n                    date: record.date,\n                    filtersUsed: record.filters_used || []\n                }));\n            setMachines(transformedMachines);\n            setFilterGroups(transformedFilterGroups);\n            setFilterTypes(filterTypesRes.data || []);\n            setMaintenanceRecords(transformedMaintenanceRecords);\n        } catch (error) {\n            console.error(\"Failed to fetch data from Supabase:\", error);\n            addToast({\n                type: \"error\",\n                title: \"Erreur de chargement\",\n                description: error.message\n            });\n        } finally{\n            setIsLoading(false);\n        }\n    }, [\n        addToast\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        fetchData();\n    }, [\n        fetchData\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if ( true && typeof localStorage !== \"undefined\") {\n            localStorage.setItem(\"gestifiltres-theme\", JSON.stringify(theme));\n        }\n    }, [\n        theme\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if ( true && typeof localStorage !== \"undefined\") {\n            localStorage.setItem(\"gestifiltres-customColors\", JSON.stringify(customColors));\n        }\n    }, [\n        customColors\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if ( true && typeof localStorage !== \"undefined\") {\n            localStorage.setItem(\"gestifiltres-savedThemes\", JSON.stringify(savedThemes));\n        }\n    }, [\n        savedThemes\n    ]);\n    const removeToast = (id)=>{\n        setToasts((prev)=>prev.filter((t)=>t.id !== id));\n    };\n    const navigateToFilterGroup = (groupId)=>{\n        setIsAIAssistantOpen(false);\n        setCurrentView(_types__WEBPACK_IMPORTED_MODULE_1__.View.FILTER_MANAGEMENT);\n        setHighlightedFilterGroupId(groupId);\n    };\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        const now = new Date().toISOString();\n        const currentValidAlerts = [];\n        const historyByMachine = new Map();\n        maintenanceRecords.forEach((rec)=>{\n            if (!historyByMachine.has(rec.machineId)) historyByMachine.set(rec.machineId, []);\n            historyByMachine.get(rec.machineId).push(rec);\n        });\n        machines.forEach((machine)=>{\n            const history = historyByMachine.get(machine.id) || [];\n            const nextMaint = (0,_utils_maintenance__WEBPACK_IMPORTED_MODULE_2__.calculateNextMaintenance)(machine, history);\n            if (nextMaint && nextMaint.dueIn <= 50) {\n                currentValidAlerts.push({\n                    id: \"maint-alert-\".concat(machine.id, \"-\").concat(nextMaint.hours),\n                    type: \"maintenance\",\n                    message: \"L'engin \".concat(machine.designation, \" (\").concat(machine.code, \") n\\xe9cessite une maintenance (Gamme \").concat(nextMaint.gamme, \") dans \").concat(nextMaint.dueIn, \"h.\"),\n                    entityId: machine.id\n                });\n            }\n        });\n        filterGroups.forEach((group)=>{\n            group.references.forEach((ref)=>{\n                if (ref.stock > 0 && ref.stock <= 5) {\n                    currentValidAlerts.push({\n                        id: \"stock-alert-\".concat(ref.id),\n                        type: \"stock\",\n                        message: \"Le stock pour le filtre \".concat(ref.reference, \" (\").concat(ref.manufacturer, \") est faible (\").concat(ref.stock, \" unit\\xe9s).\"),\n                        entityId: group.id\n                    });\n                }\n            });\n        });\n        setNotifications((prevNotifications)=>{\n            const prevMap = new Map(prevNotifications.map((n)=>[\n                    n.id,\n                    n\n                ]));\n            const nextNotifications = currentValidAlerts.map((alert)=>{\n                const prev = prevMap.get(alert.id);\n                if (prev) {\n                    return {\n                        ...prev,\n                        message: alert.message\n                    };\n                }\n                return {\n                    ...alert,\n                    read: false,\n                    createdAt: now\n                };\n            });\n            return nextNotifications;\n        });\n    }, [\n        machines,\n        filterGroups,\n        maintenanceRecords\n    ]);\n    const toggleSidebar = ()=>setIsSidebarOpen((prev)=>!prev);\n    const closeSidebar = ()=>setIsSidebarOpen(false);\n    const selectMachine = (machineId)=>{\n        const machine = machines.find((m)=>m.id === machineId);\n        if (machine) {\n            setSelectedMachine(machine);\n            setCurrentView(_types__WEBPACK_IMPORTED_MODULE_1__.View.MACHINE_DETAIL);\n        }\n    };\n    const assignFilterToMachine = async (machineId, filterTypeId, filterGroupId)=>{\n        const machineToUpdate = machines.find((m)=>m.id === machineId);\n        if (!machineToUpdate) return;\n        const newAssignedFilters = [\n            ...machineToUpdate.assignedFilters\n        ];\n        const existingIndex = newAssignedFilters.findIndex((af)=>af.filterTypeId === filterTypeId);\n        if (existingIndex > -1) {\n            newAssignedFilters[existingIndex] = {\n                ...newAssignedFilters[existingIndex],\n                filterGroupId\n            };\n        } else {\n            newAssignedFilters.push({\n                filterTypeId,\n                filterGroupId\n            });\n        }\n        const { error } = await _utils_supabase__WEBPACK_IMPORTED_MODULE_3__.supabase.from(\"machines\").update({\n            assigned_filters: newAssignedFilters\n        }).eq(\"id\", machineId);\n        if (error) {\n            addToast({\n                type: \"error\",\n                title: \"Erreur\",\n                description: error.message\n            });\n        } else {\n            fetchData();\n            if ((selectedMachine === null || selectedMachine === void 0 ? void 0 : selectedMachine.id) === machineId) {\n                const updatedMachine = {\n                    ...machineToUpdate,\n                    assignedFilters: newAssignedFilters\n                };\n                setSelectedMachine(updatedMachine);\n            }\n        }\n    };\n    const addFilterTypeToMachine = async (machineId, filterTypeId)=>{\n        const machineToUpdate = machines.find((m)=>m.id === machineId);\n        if (!machineToUpdate || machineToUpdate.assignedFilters.some((af)=>af.filterTypeId === filterTypeId)) return;\n        const newAssignedFilters = [\n            ...machineToUpdate.assignedFilters,\n            {\n                filterTypeId,\n                filterGroupId: null\n            }\n        ];\n        const { error } = await _utils_supabase__WEBPACK_IMPORTED_MODULE_3__.supabase.from(\"machines\").update({\n            assigned_filters: newAssignedFilters\n        }).eq(\"id\", machineId);\n        if (error) {\n            addToast({\n                type: \"error\",\n                title: \"Erreur\",\n                description: error.message\n            });\n        } else {\n            fetchData();\n            if ((selectedMachine === null || selectedMachine === void 0 ? void 0 : selectedMachine.id) === machineId) {\n                const updatedMachine = {\n                    ...machineToUpdate,\n                    assignedFilters: newAssignedFilters\n                };\n                setSelectedMachine(updatedMachine);\n            }\n        }\n    };\n    const removeFilterTypeFromMachine = async (machineId, filterTypeId)=>{\n        const machineToUpdate = machines.find((m)=>m.id === machineId);\n        if (!machineToUpdate) return;\n        const newAssignedFilters = machineToUpdate.assignedFilters.filter((af)=>af.filterTypeId !== filterTypeId);\n        const { error } = await _utils_supabase__WEBPACK_IMPORTED_MODULE_3__.supabase.from(\"machines\").update({\n            assigned_filters: newAssignedFilters\n        }).eq(\"id\", machineId);\n        if (error) {\n            addToast({\n                type: \"error\",\n                title: \"Erreur\",\n                description: error.message\n            });\n        } else {\n            fetchData();\n            if ((selectedMachine === null || selectedMachine === void 0 ? void 0 : selectedMachine.id) === machineId) {\n                const updatedMachine = {\n                    ...machineToUpdate,\n                    assignedFilters: newAssignedFilters\n                };\n                setSelectedMachine(updatedMachine);\n            }\n        }\n    };\n    const openConfirmationDialog = (config)=>{\n        setConfirmationDialogConfig({\n            ...config,\n            isOpen: true\n        });\n    };\n    const closeConfirmationDialog = ()=>{\n        setConfirmationDialogConfig((prev)=>({\n                ...prev,\n                isOpen: false\n            }));\n    };\n    const handleConfirm = ()=>{\n        confirmationDialogConfig.onConfirm();\n        closeConfirmationDialog();\n    };\n    const openMachineModal = (machine)=>{\n        setEditingMachine(machine);\n        setIsMachineModalOpen(true);\n    };\n    const closeMachineModal = ()=>setIsMachineModalOpen(false);\n    const saveMachine = async (machineData)=>{\n        const machineToSave = editingMachine ? {\n            id: editingMachine.id,\n            code: machineData.code,\n            designation: machineData.designation,\n            marque: machineData.marque,\n            type: machineData.type,\n            serial_number: machineData.serialNumber || \"\",\n            registration_number: machineData.registrationNumber || \"\",\n            service_hours: machineData.serviceHours,\n            assigned_filters: editingMachine.assignedFilters || []\n        } : {\n            id: \"m-\".concat(Date.now()),\n            code: machineData.code,\n            designation: machineData.designation,\n            marque: machineData.marque,\n            type: machineData.type,\n            serial_number: machineData.serialNumber || \"\",\n            registration_number: machineData.registrationNumber || \"\",\n            service_hours: machineData.serviceHours,\n            assigned_filters: []\n        };\n        const { error } = await _utils_supabase__WEBPACK_IMPORTED_MODULE_3__.supabase.from(\"machines\").upsert(machineToSave);\n        if (error) {\n            addToast({\n                type: \"error\",\n                title: \"Erreur\",\n                description: error.message\n            });\n        } else {\n            fetchData();\n            const successMessage = editingMachine ? \"Engin Mis \\xe0 Jour\" : \"Engin Ajout\\xe9\";\n            addToast({\n                type: \"success\",\n                title: successMessage,\n                description: \"L'engin \".concat(machineToSave.designation, \" a \\xe9t\\xe9 sauvegard\\xe9.\")\n            });\n            if ((selectedMachine === null || selectedMachine === void 0 ? void 0 : selectedMachine.id) === machineToSave.id) {\n                // Transform database format to application format for state\n                const transformedMachine = {\n                    id: machineToSave.id,\n                    code: machineToSave.code,\n                    designation: machineToSave.designation,\n                    marque: machineToSave.marque,\n                    type: machineToSave.type,\n                    serialNumber: machineToSave.serial_number,\n                    registrationNumber: machineToSave.registration_number,\n                    serviceHours: machineToSave.service_hours,\n                    assignedFilters: machineToSave.assigned_filters\n                };\n                setSelectedMachine(transformedMachine);\n            }\n        }\n        closeMachineModal();\n    };\n    const deleteMachine = async (machineId)=>{\n        const { error } = await _utils_supabase__WEBPACK_IMPORTED_MODULE_3__.supabase.from(\"machines\").delete().eq(\"id\", machineId);\n        if (error) {\n            addToast({\n                type: \"error\",\n                title: \"Erreur\",\n                description: error.message\n            });\n        } else {\n            fetchData();\n            addToast({\n                type: \"info\",\n                title: \"Engin Supprim\\xe9\"\n            });\n        }\n    };\n    const closeImportModal = ()=>setIsImportModalOpen(false);\n    const importMachines = async (newMachinesData)=>{\n        const machinesToAdd = newMachinesData.map((nm)=>({\n                id: \"m-\".concat(Date.now(), \"-\").concat(Math.random().toString(36).substr(2, 9)),\n                code: nm.code,\n                designation: nm.designation,\n                marque: nm.marque,\n                type: nm.type,\n                serial_number: nm.serialNumber || \"\",\n                registration_number: nm.registrationNumber || \"\",\n                service_hours: nm.serviceHours,\n                assigned_filters: []\n            }));\n        const { error } = await _utils_supabase__WEBPACK_IMPORTED_MODULE_3__.supabase.from(\"machines\").insert(machinesToAdd);\n        if (error) {\n            addToast({\n                type: \"error\",\n                title: \"Erreur d'importation\",\n                description: error.message\n            });\n        } else {\n            fetchData();\n            addToast({\n                type: \"success\",\n                title: \"Importation R\\xe9ussie\",\n                description: \"\".concat(machinesToAdd.length, \" engins ont \\xe9t\\xe9 ajout\\xe9s.\")\n            });\n        }\n        closeImportModal();\n    };\n    const importMaintenanceRecords = async (newMaintenanceData)=>{\n        try {\n            // First, get all machines to match designations\n            const { data: machinesData, error: machinesError } = await _utils_supabase__WEBPACK_IMPORTED_MODULE_3__.supabase.from(\"machines\").select(\"id, code, designation\");\n            if (machinesError) {\n                throw machinesError;\n            }\n            // Create maps for quick lookup\n            const machineCodeToIdMap = new Map();\n            const machineDesignationToIdMap = new Map();\n            machinesData.forEach((machine)=>{\n                machineCodeToIdMap.set(machine.code, machine.id);\n                machineDesignationToIdMap.set(machine.designation.toLowerCase(), machine.id);\n            });\n            // Track records that couldn't be matched for better feedback\n            let unmatchedRecordsCount = 0;\n            const unmatchedRecords = [];\n            // Create maintenance records for each imported item\n            const maintenanceRecordsToAdd = newMaintenanceData.map((record)=>{\n                // Try to find the machine ID by designation\n                let machineId = undefined; // Use undefined instead of null\n                if (record.machineDesignation) {\n                    // First try exact match with designation\n                    machineId = machineDesignationToIdMap.get(record.machineDesignation.toLowerCase()) || undefined;\n                    // If not found, try partial match\n                    if (!machineId) {\n                        for (const [designation, id] of machineDesignationToIdMap.entries()){\n                            if (record.machineDesignation.toLowerCase().includes(designation) || designation.includes(record.machineDesignation.toLowerCase())) {\n                                machineId = id;\n                                break;\n                            }\n                        }\n                    }\n                    // If still not found, try to match with machine codes\n                    if (!machineId) {\n                        machineId = machineCodeToIdMap.get(record.machineDesignation) || undefined;\n                    }\n                    // If still not found, collect for feedback\n                    if (!machineId) {\n                        unmatchedRecordsCount++;\n                        unmatchedRecords.push(record.machineDesignation);\n                    }\n                } else {\n                    // No machine designation provided\n                    unmatchedRecordsCount++;\n                    unmatchedRecords.push(\"Aucune d\\xe9signation fournie\");\n                }\n                // Only include machine_id in the record if it's not undefined\n                const baseRecord = {\n                    id: \"maint-\".concat(Date.now(), \"-\").concat(Math.random().toString(36).substr(2, 9)),\n                    date: record.date,\n                    service_hours: record.serviceHours,\n                    maintenance_range: record.maintenanceRange,\n                    filters_used: []\n                };\n                // Add machine_id only if it's defined\n                if (machineId !== undefined) {\n                    return {\n                        ...baseRecord,\n                        machine_id: machineId\n                    };\n                } else {\n                    return baseRecord;\n                }\n            }).filter((record)=>record.date && record.date !== \"Invalid Date\"); // Filter out records with invalid dates\n            // Insert all records (including those without matched machines)\n            if (maintenanceRecordsToAdd.length > 0) {\n                const { data, error } = await _utils_supabase__WEBPACK_IMPORTED_MODULE_3__.supabase.from(\"maintenance_records\").insert(maintenanceRecordsToAdd) // Cast to any to avoid type issues\n                .select();\n                if (error) {\n                    throw error;\n                }\n                // Refresh data to show the new records\n                await fetchData();\n                // Show success message with details about unmatched records\n                let description = \"Donn\\xe9es de maintenance import\\xe9es avec succ\\xe8s. \".concat(maintenanceRecordsToAdd.length, \" enregistrements ont \\xe9t\\xe9 ajout\\xe9s \\xe0 la table de maintenance.\");\n                if (unmatchedRecordsCount > 0) {\n                    description += \" \".concat(unmatchedRecordsCount, \" enregistrement(s) n'ont pas pu \\xeatre associ\\xe9s \\xe0 un engin existant et seront import\\xe9s sans association.\");\n                }\n                addToast({\n                    type: \"success\",\n                    title: \"Importation de Maintenance\",\n                    description\n                });\n                console.log(\"Imported maintenance records:\", data);\n            } else {\n                // Show message if no records to import\n                addToast({\n                    type: \"info\",\n                    title: \"Importation de Maintenance\",\n                    description: \"Aucun enregistrement de maintenance \\xe0 importer.\"\n                });\n            }\n        } catch (error) {\n            console.error(\"Error importing maintenance records:\", error);\n            addToast({\n                type: \"error\",\n                title: \"Erreur d'importation\",\n                description: \"\\xc9chec de l'importation des donn\\xe9es de maintenance: \".concat(error.message)\n            });\n        }\n        // Log the data for debugging\n        console.log(\"Maintenance data to import:\", newMaintenanceData);\n        closeImportModal();\n    };\n    const openFilterGroupModal = (group)=>{\n        setEditingFilterGroup(group);\n        setIsFilterGroupModalOpen(true);\n    };\n    const closeFilterGroupModal = ()=>setIsFilterGroupModalOpen(false);\n    const saveFilterGroup = async (groupData)=>{\n        const groupToSave = \"id\" in groupData && groupData.id ? {\n            id: groupData.id,\n            name: groupData.name,\n            filter_type: groupData.filterType,\n            original_reference_id: groupData.originalReferenceId,\n            references: groupData.references\n        } : {\n            id: \"fg-\".concat(Date.now()),\n            name: groupData.name,\n            filter_type: groupData.filterType,\n            original_reference_id: groupData.originalReferenceId,\n            references: groupData.references\n        };\n        const { error } = await _utils_supabase__WEBPACK_IMPORTED_MODULE_3__.supabase.from(\"filter_groups\").upsert(groupToSave);\n        if (error) {\n            addToast({\n                type: \"error\",\n                title: \"Erreur\",\n                description: error.message\n            });\n        } else {\n            fetchData();\n            const successMessage = \"id\" in groupData && groupData.id ? \"Groupe Mis \\xe0 Jour\" : \"Groupe Cr\\xe9\\xe9\";\n            addToast({\n                type: \"success\",\n                title: successMessage,\n                description: \"Le groupe \".concat(groupToSave.name, \" a \\xe9t\\xe9 sauvegard\\xe9.\")\n            });\n        }\n        closeFilterGroupModal();\n    };\n    const deleteFilterGroup = async (groupId)=>{\n        const { error } = await _utils_supabase__WEBPACK_IMPORTED_MODULE_3__.supabase.from(\"filter_groups\").delete().eq(\"id\", groupId);\n        if (error) {\n            addToast({\n                type: \"error\",\n                title: \"Erreur\",\n                description: error.message\n            });\n        } else {\n            // Also need to un-assign from machines. This is a non-atomic operation for simplicity.\n            machines.forEach(async (m)=>{\n                if (m.assignedFilters.some((af)=>af.filterGroupId === groupId)) {\n                    const newAssigned = m.assignedFilters.map((af)=>af.filterGroupId === groupId ? {\n                            ...af,\n                            filterGroupId: null\n                        } : af);\n                    await _utils_supabase__WEBPACK_IMPORTED_MODULE_3__.supabase.from(\"machines\").update({\n                        assigned_filters: newAssigned\n                    }).eq(\"id\", m.id);\n                }\n            });\n            fetchData();\n            addToast({\n                type: \"info\",\n                title: \"Groupe Supprim\\xe9\"\n            });\n        }\n    };\n    const openMaintenanceModal = function(record) {\n        let viewOnly = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;\n        setEditingMaintenanceRecord(record);\n        setIsMaintenanceViewOnly(viewOnly);\n        setIsMaintenanceModalOpen(true);\n    };\n    const closeMaintenanceModal = ()=>setIsMaintenanceModalOpen(false);\n    const saveMaintenanceRecord = async (recordData)=>{\n        const recordToSave = \"id\" in recordData && recordData.id ? {\n            id: recordData.id,\n            machine_id: recordData.machineId,\n            date: recordData.date,\n            service_hours: recordData.serviceHours,\n            maintenance_range: recordData.maintenanceRange,\n            filters_used: recordData.filtersUsed\n        } : {\n            id: \"maint-\".concat(Date.now()),\n            machine_id: recordData.machineId,\n            date: recordData.date,\n            service_hours: recordData.serviceHours,\n            maintenance_range: recordData.maintenanceRange,\n            filters_used: recordData.filtersUsed\n        };\n        const { error } = await _utils_supabase__WEBPACK_IMPORTED_MODULE_3__.supabase.from(\"maintenance_records\").upsert(recordToSave);\n        if (error) {\n            addToast({\n                type: \"error\",\n                title: \"Erreur\",\n                description: error.message\n            });\n        } else {\n            const machine = machines.find((m)=>m.id === recordData.machineId);\n            if (machine && recordData.serviceHours > machine.serviceHours) {\n                await _utils_supabase__WEBPACK_IMPORTED_MODULE_3__.supabase.from(\"machines\").update({\n                    service_hours: recordData.serviceHours\n                }).eq(\"id\", machine.id);\n            }\n            fetchData();\n            const successMessage = \"id\" in recordData && recordData.id ? \"Maintenance Mise \\xe0 Jour\" : \"Maintenance Enregistr\\xe9e\";\n            addToast({\n                type: \"success\",\n                title: successMessage\n            });\n        }\n        closeMaintenanceModal();\n    };\n    const deleteMaintenanceRecord = async (recordId)=>{\n        const { error } = await _utils_supabase__WEBPACK_IMPORTED_MODULE_3__.supabase.from(\"maintenance_records\").delete().eq(\"id\", recordId);\n        if (error) {\n            addToast({\n                type: \"error\",\n                title: \"Erreur\",\n                description: error.message\n            });\n        } else {\n            fetchData();\n            addToast({\n                type: \"info\",\n                title: \"Enregistrement Supprim\\xe9\"\n            });\n        }\n    };\n    const handleNotificationClick = (notification)=>{\n        setNotifications((prev)=>prev.map((n)=>n.id === notification.id ? {\n                    ...n,\n                    read: true\n                } : n));\n        if (notification.type === \"maintenance\") {\n            selectMachine(notification.entityId);\n        } else if (notification.type === \"stock\") {\n            navigateToFilterGroup(notification.entityId);\n        }\n    };\n    const markAllNotificationsAsRead = ()=>{\n        setNotifications((prev)=>prev.map((n)=>({\n                    ...n,\n                    read: true\n                })));\n    };\n    const openAddStockModal = (info)=>{\n        setStockUpdateInfo(info);\n        setIsAddStockModalOpen(true);\n    };\n    const closeAddStockModal = ()=>setIsAddStockModalOpen(false);\n    const addStock = async (quantity)=>{\n        if (!stockUpdateInfo) return;\n        const { filterReference, filterGroupId } = stockUpdateInfo;\n        const groupToUpdate = filterGroups.find((g)=>g.id === filterGroupId);\n        if (!groupToUpdate) return;\n        const newReferences = groupToUpdate.references.map((ref)=>ref.id === filterReference.id ? {\n                ...ref,\n                stock: ref.stock + quantity\n            } : ref);\n        const { error } = await _utils_supabase__WEBPACK_IMPORTED_MODULE_3__.supabase.from(\"filter_groups\").update({\n            references: newReferences\n        }).eq(\"id\", filterGroupId);\n        if (error) {\n            addToast({\n                type: \"error\",\n                title: \"Erreur\",\n                description: error.message\n            });\n        } else {\n            fetchData();\n            addToast({\n                type: \"success\",\n                title: \"Stock Ajout\\xe9\",\n                description: \"\".concat(quantity, \" unit\\xe9(s) ajout\\xe9e(s) pour \").concat(filterReference.reference, \".\")\n            });\n        }\n        closeAddStockModal();\n    };\n    const setTheme = (themeId)=>{\n        _setTheme(themeId);\n        if (themeId.startsWith(\"custom-\")) {\n            const saved = savedThemes.find((t)=>t.id === themeId);\n            if (saved) setCustomColors(saved.colors);\n        }\n    };\n    const openThemeCustomizer = (themeToEdit)=>{\n        setEditingCustomTheme(themeToEdit);\n        setCustomColors(themeToEdit ? themeToEdit.colors : defaultCustomColors);\n        setIsThemeCustomizerOpen(true);\n    };\n    const closeThemeCustomizer = ()=>{\n        setTheme(theme);\n        setIsThemeCustomizerOpen(false);\n    };\n    const saveCustomTheme = (themeData)=>{\n        if (themeData.id) {\n            const updatedThemes = savedThemes.map((t)=>t.id === themeData.id ? {\n                    ...t,\n                    ...themeData\n                } : t);\n            setSavedThemes(updatedThemes);\n            setTheme(themeData.id);\n        } else {\n            const newTheme = {\n                ...themeData,\n                id: \"custom-\".concat(Date.now())\n            };\n            setSavedThemes([\n                ...savedThemes,\n                newTheme\n            ]);\n            setTheme(newTheme.id);\n        }\n        addToast({\n            type: \"success\",\n            title: \"Th\\xe8me Enregistr\\xe9\",\n            description: 'Le th\\xe8me \"'.concat(themeData.name, '\" a \\xe9t\\xe9 sauvegard\\xe9.')\n        });\n    };\n    const deleteCustomTheme = (themeId)=>{\n        setSavedThemes(savedThemes.filter((t)=>t.id !== themeId));\n        if (theme === themeId) {\n            setTheme(\"default-light\");\n        }\n        addToast({\n            type: \"info\",\n            title: \"Th\\xe8me Supprim\\xe9\"\n        });\n    };\n    const actions = {\n        setCurrentView,\n        toggleSidebar,\n        closeSidebar,\n        selectMachine,\n        assignFilterToMachine,\n        addFilterTypeToMachine,\n        removeFilterTypeFromMachine,\n        openConfirmationDialog,\n        closeConfirmationDialog,\n        handleConfirm,\n        openMachineModal,\n        closeMachineModal,\n        saveMachine,\n        deleteMachine,\n        openFilterGroupModal,\n        closeFilterGroupModal,\n        saveFilterGroup,\n        deleteFilterGroup,\n        openMaintenanceModal,\n        closeMaintenanceModal,\n        saveMaintenanceRecord,\n        deleteMaintenanceRecord,\n        navigateToFilterGroup,\n        clearHighlightedFilterGroup: ()=>setHighlightedFilterGroupId(null),\n        handleNotificationClick,\n        markAllNotificationsAsRead,\n        openAIAssistant: ()=>setIsAIAssistantOpen(true),\n        closeAIAssistant: ()=>setIsAIAssistantOpen(false),\n        openScanner: ()=>setIsScannerOpen(true),\n        closeScanner: ()=>setIsScannerOpen(false),\n        addToast,\n        removeToast,\n        openAddStockModal,\n        closeAddStockModal,\n        addStock,\n        setTheme,\n        openThemeCustomizer,\n        closeThemeCustomizer,\n        saveCustomTheme,\n        deleteCustomTheme,\n        openImportModal: ()=>setIsImportModalOpen(true),\n        closeImportModal,\n        importMachines,\n        importMaintenanceRecords\n    };\n    const state = {\n        isLoading,\n        currentView,\n        machines,\n        filterGroups,\n        filterTypes,\n        selectedMachine,\n        maintenanceRecords,\n        theme,\n        customColors,\n        savedThemes,\n        highlightedFilterGroupId,\n        isSidebarOpen,\n        notifications,\n        toasts,\n        isScannerOpen,\n        isAIAssistantOpen,\n        isMachineModalOpen,\n        editingMachine,\n        isFilterGroupModalOpen,\n        editingFilterGroup,\n        isMaintenanceModalOpen,\n        editingMaintenanceRecord,\n        isMaintenanceViewOnly,\n        isAddStockModalOpen,\n        stockUpdateInfo,\n        isThemeCustomizerOpen,\n        editingCustomTheme,\n        isImportModalOpen,\n        confirmationDialogConfig\n    };\n    return {\n        state,\n        actions\n    };\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./hooks/useAppLogic.ts\n"));

/***/ })

});